/**
 * Simple ASCII Art Generator - MVP Version
 * All fonts bundled inline for simplicity
 */

// Minimal built-in FontManager
class FontManager {
    constructor() {
        this.fonts = null;
    }

    ensureFonts() {
        if (this.fonts) return;
        const fonts = {};

        // ===== ENHANCED CORE FONTS =====

        // Standard (improved clarity)
        fonts.standard = {
            name: 'standard',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' ??? ', '   ? ', '  ?  ', '     ', '  ?  '],
                '0': [' ### ', '#   #', '#   #', '#   #', ' ### '],
                '1': ['  #  ', ' ##  ', '  #  ', '  #  ', ' ### '],
                '2': [' ### ', '    #', '  #  ', ' #   ', '#####'],
                '3': [' ### ', '    #', '  ## ', '    #', ' ### '],
                '4': ['#   #', '#   #', ' ####', '    #', '    #'],
                '5': ['#####', '#    ', ' ### ', '    #', '##### '],
                '6': [' ### ', '#    ', '#### ', '#   #', ' ### '],
                '7': ['#####', '    #', '   # ', '  #  ', ' #   '],
                '8': [' ### ', '#   #', ' ### ', '#   #', ' ### '],
                '9': [' ### ', '#   #', ' ####', '    #', ' ### '],
                'A': [' ### ', '#   #', '#####', '#   #', '#   #'],
                'B': ['#### ', '#   #', '#### ', '#   #', '#### '],
                'C': [' ### ', '#    ', '#    ', '#    ', ' ### '],
                'D': ['#### ', '#   #', '#   #', '#   #', '#### '],
                'E': ['#####', '#    ', '#### ', '#    ', '#####'],
                'F': ['#####', '#    ', '#### ', '#    ', '#    '],
                'G': [' ### ', '#    ', '#  ##', '#   #', ' ### '],
                'H': ['#   #', '#   #', '#####', '#   #', '#   #'],
                'I': ['#####', '  #  ', '  #  ', '  #  ', '#####'],
                'J': [' ###', '   #', '   #', '#  #', ' ## '],
                'K': ['#   #', '#  # ', '###  ', '#  # ', '#   #'],
                'L': ['#    ', '#    ', '#    ', '#    ', '#####'],
                'M': ['#   #', '## ##', '# # #', '#   #', '#   #'],
                'N': ['#   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' ### ', '#   #', '#   #', '#   #', ' ### '],
                'P': ['#### ', '#   #', '#### ', '#    ', '#    '],
                'Q': [' ### ', '#   #', '#   #', '#  # ', ' ####'],
                'R': ['#### ', '#   #', '#### ', '#  # ', '#   #'],
                'S': [' ####', '#    ', ' ### ', '    #', '#### '],
                'T': ['#####', '  #  ', '  #  ', '  #  ', '  #  '],
                'U': ['#   #', '#   #', '#   #', '#   #', ' ### '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['#   #', ' # # ', '  #  ', '  #  ', '  #  '],
                'Z': ['#####', '   # ', '  #  ', ' #   ', '#####']
            }
        };

        // Block (solid)
        fonts.block = {
            name: 'block',
            height: 5,
            glyphs: this._makeBlockVariant(fonts.standard.glyphs)
        };

        // Mini 3-row compact
        fonts.mini = {
            name: 'mini',
            height: 3,
            glyphs: {
                ' ': ['   ', '   ', '   '],
                '?': [' ? ', ' ? ', '   '],
                '0': ['###', '# #', '###'],
                '1': [' ##', '  #', '###'],
                '2': ['## ', ' # ', '###'],
                '3': ['## ', ' ##', '## '],
                '4': ['# #', '###', '  #'],
                '5': ['###', '##', '## '],
                '6': ['## ', '###', '## '],
                '7': ['###', '  #', '  #'],
                '8': ['###', '###', '###'],
                '9': ['###', '## ', '###'],
                'A': [' # ', '# #', '###'],
                'B': ['##', '##', '##'],
                'C': [' ##', '#  ', '## '],
                'D': ['##', '# #', '##'],
                'E': ['###', '##', '###'],
                'F': ['###', '##', '#  '],
                'G': [' ##', '# #', '## '],
                'H': ['# #', '###', '# #'],
                'I': ['###', ' # ', '###'],
                'J': ['###', '  #', '## '],
                'K': ['# #', '##', '# #'],
                'L': ['#  ', '#  ', '###'],
                'M': ['###', '###', '# #'],
                'N': ['##', '###', '# #'],
                'O': ['###', '# #', '###'],
                'P': ['##', '##', '#  '],
                'Q': ['###', '# #', '###'],
                'R': ['##', '##', '# #'],
                'S': [' ##', '##', '## '],
                'T': ['###', ' # ', ' # '],
                'U': ['# #', '# #', '###'],
                'V': ['# #', '# #', ' # '],
                'W': ['# #', '###', '###'],
                'X': ['# #', ' # ', '# #'],
                'Y': ['# #', ' # ', ' # '],
                'Z': ['###', ' # ', '###']
            }
        };

        // Small (compact but readable)
        fonts.small = {
            name: 'small',
            height: 5,
            glyphs: {
                ' ': ['   ', '   ', '   ', '   ', '   '],
                '?': [' ? ', ' ? ', '   ', '   ', '   '],
                '0': ['## ', '# #', '# #', '# #', '## '],
                '1': [' # ', '## ', ' # ', ' # ', '###'],
                '2': ['## ', '  #', ' ##', ' #  ', '###'],
                '3': ['## ', '  #', ' ## ', '  #', '## '],
                '4': ['# #', '###', '  #', '  #', '  #'],
                '5': ['###', '#  ', '## ', '  #', '## '],
                '6': ['## ', '#  ', '###', '# #', '## '],
                '7': ['###', '  #', ' # ', '#  ', '#  '],
                '8': ['## ', '# #', '## ', '# #', '## '],
                '9': ['## ', '# #', '###', '  #', '## '],
                'A': [' # ', '# #', '###', '# #', '# #'],
                'B': ['##', '# #', '##', '# #', '##'],
                'C': [' ##', '#  ', '#  ', '#  ', '##'],
                'D': ['##', '# #', '# #', '# #', '##'],
                'E': ['###', '#  ', '## ', '#  ', '###'],
                'F': ['###', '#  ', '## ', '#  ', '#  '],
                'G': [' ##', '#  ', '# #', '# #', '## '],
                'H': ['# #', '# #', '###', '# #', '# #'],
                'I': ['###', ' # ', ' # ', ' # ', '###'],
                'J': ['  #', '  #', '  #', '# #', '## '],
                'K': ['# #', ' ##', '#  ', ' ##', '# #'],
                'L': ['#  ', '#  ', '#  ', '#  ', '###'],
                'M': ['# #', '###', '# #', '# #', '# #'],
                'N': ['##', '# #', '# #', '# #', '##'],
                'O': ['## ', '# #', '# #', '# #', '## '],
                'P': ['##', '# #', '##', '#  ', '#  '],
                'Q': ['## ', '# #', '# #', '## ', '  #'],
                'R': ['##', '# #', '##', ' ##', '# #'],
                'S': [' ##', '#  ', '## ', '  #', '## '],
                'T': ['###', ' # ', ' # ', ' # ', ' # '],
                'U': ['# #', '# #', '# #', '# #', '## '],
                'V': ['# #', '# #', '# #', ' ##', ' # '],
                'W': ['# #', '# #', '###', '###', '# #'],
                'X': ['# #', ' ##', ' # ', ' ##', '# #'],
                'Y': ['# #', ' ##', ' # ', ' # ', ' # '],
                'Z': ['###', '  #', ' # ', ' # ', '###']
            }
        };

        // Bubble (rounded)
        fonts.bubble = {
            name: 'bubble',
            height: 5,
            glyphs: {
                ' ': ['    ', '    ', '    ', '    ', '    '],
                '?': [' ?? ', '  ? ', '    ', '  ? ', '    '],
                '0': [' oo ', 'o  o', 'o  o', 'o  o', ' oo '],
                '1': [' o  ', 'oo  ', ' o  ', ' o  ', 'ooo '],
                '2': [' oo ', 'o  o', '   o', ' o  ', 'oooo'],
                '3': [' oo ', 'o  o', '  o ', 'o  o', ' oo '],
                '4': ['o   ', 'o  o', 'oooo', '   o', '   o'],
                '5': ['oooo', 'o   ', ' oo ', '   o', ' oo '],
                '6': [' oo ', 'o   ', 'ooo ', 'o  o', ' oo '],
                '7': ['oooo', '   o', '  o ', ' o  ', ' o  '],
                '8': [' oo ', 'o  o', ' oo ', 'o  o', ' oo '],
                '9': [' oo ', 'o  o', ' ooo', '   o', ' oo '],
                'A': [' oo ', 'o  o', 'oooo', 'o  o', 'o  o'],
                'B': ['ooo ', 'o  o', 'ooo ', 'o  o', 'ooo '],
                'C': [' oo ', 'o   ', 'o   ', 'o   ', ' oo '],
                'D': ['ooo ', 'o  o', 'o  o', 'o  o', 'ooo '],
                'E': ['oooo', 'o   ', 'ooo ', 'o   ', 'oooo'],
                'F': ['oooo', 'o   ', 'ooo ', 'o   ', 'o   '],
                'G': [' oo ', 'o   ', 'o oo', 'o  o', ' oo '],
                'H': ['o  o', 'o  o', 'oooo', 'o  o', 'o  o'],
                'I': [' ooo', '  o ', '  o ', '  o ', ' ooo'],
                'J': ['  oo', '   o', '   o', 'o  o', ' oo '],
                'K': ['o  o', ' oo ', 'o   ', ' oo ', 'o  o'],
                'L': ['o   ', 'o   ', 'o   ', 'o   ', 'oooo'],
                'M': ['o   o', 'oo oo', 'o o o', 'o   o', 'o   o'],
                'N': ['oo  o', 'o o o', 'o o o', 'o  oo', 'o   o'],
                'O': [' oo ', 'o  o', 'o  o', 'o  o', ' oo '],
                'P': ['ooo ', 'o  o', 'ooo ', 'o   ', 'o   '],
                'Q': [' oo ', 'o  o', 'o  o', 'o oo', ' ooo'],
                'R': ['ooo ', 'o  o', 'ooo ', 'o  o', 'o  o'],
                'S': [' ooo', 'o   ', ' oo ', '   o', 'ooo '],
                'T': ['oooo', '  o ', '  o ', '  o ', '  o '],
                'U': ['o  o', 'o  o', 'o  o', 'o  o', ' oo '],
                'V': ['o  o', 'o  o', 'o  o', ' oo ', '  o '],
                'W': ['o   o', 'o   o', 'o o o', 'oo oo', 'o   o'],
                'X': ['o  o', ' oo ', '  o ', ' oo ', 'o  o'],
                'Y': ['o  o', ' oo ', '  o ', '  o ', '  o '],
                'Z': ['oooo', '   o', '  o ', ' #   ', '#####']
            }
        };

        // 3D (depth effect)
        fonts['3d'] = {
            name: '3d',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': ['  ?  ', '  ?  ', '     ', '  ?  ', '     '],
                '0': [' ### ', '#  ##', '#  ##', ' ### ', '     '],
                '1': ['   # ', '  ## ', '   # ', '   # ', '  ###'],
                '2': [' ### ', '#   #', '   # ', '  #  ', ' ####'],
                '3': [' ### ', '   ##', '   # ', '#  ##', ' ### '],
                '4': ['#   #', '#   #', ' #### ', '    #', '    #'],
                '5': [' #### ', '#     ', ' #### ', '     #', ' #### '],
                '6': [' ### ', '#    ', ' ###', '#  ##', ' ### '],
                '7': [' ####', '    #', '   # ', '  #  ', ' #   '],
                '8': [' ### ', '#  ##', ' ### ', '#  ##', ' ### '],
                '9': [' ### ', '#  ##', ' ####', '    #', ' ### '],
                'A': ['  #  ', ' ###', '#   #', ' #### ', '#   #'],
                'B': [' #### ', '#    #', ' ### ', '#    #', ' #### '],
                'C': [' ###', '#   ', '#   ', '#   ', ' ###'],
                'D': [' #### ', '#    #', '#    #', '#    #', ' #### '],
                'E': [' #### ', '#     ', ' ### ', '#     ', ' #### '],
                'F': [' #### ', '#     ', ' ### ', '#     ', '#     '],
                'G': [' ###', '#   ', '#  ##', '#   #', ' ###'],
                'H': ['#   #', '#   #', ' #### ', '#   #', '#   #'],
                'I': [' ### ', '  #  ', '  #  ', '  #  ', ' ### '],
                'J': ['    #', '    #', '    #', '#   #', ' ### '],
                'K': ['#   #', '  ##', ' #   ', '  ##', '#   #'],
                'L': ['#    ', '#    ', '#    ', '#    ', ' #### '],
                'M': ['#   #', '## ##', '# # #', '#   #', '#   #'],
                'N': ['#   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' ### ', '#   #', '#   #', '#   #', ' ### '],
                'P': [' ####', '#   #', ' #### ', '#    ', '#    '],
                'Q': [' ### ', '#   #', '#   #', ' ### ', '    #'],
                'R': [' ####', '#   #', ' #### ', '#  #░', '#   #'],
                'S': [' ####', '#    ', ' ### ', '    #', ' ####'],
                'T': [' ####', '  #  ', '  #  ', '  #  ', '  #  '],
                'U': ['#   #', '#   #', '#   #', '#   #', ' ### '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['#   #', ' # # ', '  #  ', '  #  ', '  #  '],
                'Z': [' #### ', '    #', '   # ', '  #  ', ' #### ']
            }
        };

        // ===== NEW FONT STYLES (10 NEW) =====

        // Outlined (box style)
        fonts.outlined = {
            name: 'outlined',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' [?] ', '  ?  ', '     ', '  ?  ', '     '],
                '0': [' ___ ', '|   |', '|   |', '|   |', ' ‾‾‾ '],
                '1': ['  |  ', ' _|  ', '  |  ', '  |  ', ' _|_ '],
                '2': [' ___ ', '    |', '  _  ', ' |   ', ' ____ '],
                '3': [' ___ ', '    |', '  __ ', '    |', ' ‾‾‾ '],
                '4': ['|   |', '|___|', '    |', '    |', '    |'],
                '5': [' ___ ', '|    ', ' ‾‾| ', '    |', '___  '],
                '6': [' ___ ', '|    ', '| __ ', '|   |', ' ‾‾‾ '],
                '7': [' ___ ', '    |', '   | ', '  |  ', '  |  '],
                '8': [' ___ ', '|   |', ' ___ ', '|   |', ' ‾‾‾ '],
                '9': [' ___ ', '|   |', ' ____', '    |', ' ‾‾‾ '],
                'A': ['  _  ', ' / \\ ', '/   \\', '\\___/', '     '],
                'B': [' ___ ', '|   |', '|___|', '|   |', '|___|'],
                'C': [' ___ ', '|    ', '|    ', '|    ', ' ‾‾‾ '],
                'D': [' ___ ', '|   \\', '|   |', '|   /', ' ‾‾‾ '],
                'E': [' ___ ', '|    ', '|___ ', '|    ', '|___ '],
                'F': [' ___ ', '|    ', '|___ ', '|    ', '|    '],
                'G': [' ___ ', '|    ', '| __ ', '|   |', ' ‾‾‾ '],
                'H': ['|   |', '|   |', '|___|', '|   |', '|   |'],
                'I': [' ___ ', '  |  ', '  |  ', '  |  ', ' ___ '],
                'J': ['  __ ', '    |', '    |', '|   |', ' ___ '],
                'K': ['|   |', '|  / ', '| /  ', '|  \\\\', '|   |'],
                'L': ['|    ', '|    ', '|    ', '|    ', '|___ '],
                'M': ['|   |', '|\\ /|', '| V |', '|   |', '|   |'],
                'N': ['|\\  |', '| \\ |', '|  \\|', '|   |', '|   |'],
                'O': [' ___ ', '|   |', '|   |', '|   |', ' ‾‾‾ '],
                'P': [' ___ ', '|   |', '|___ ', '|    ', '|    '],
                'Q': [' ___ ', '|   |', '|   |', '|  / ', ' ‾\\ '],
                'R': [' ___ ', '|   |', '|___ ', '|  \\\\', '|   |'],
                'S': [' ___ ', '|    ', ' ___ ', '    |', '___  '],
                'T': [' ___ ', '  |  ', '  |  ', '  |  ', '  |  '],
                'U': ['|   |', '|   |', '|   |', '|   |', ' ‾‾‾ '],
                'V': ['|   |', '|   |', '|   |', ' | | ', '  V  '],
                'W': ['|   |', '|   |', '| | |', '| | |', '  W  '],
                'X': ['|   |', ' \\ / ', '  X  ', ' / \\ ', '|   |'],
                'Y': ['|   |', ' \\ / ', '  Y  ', '  |  ', '  |  '],
                'Z': [' ___ ', '   / ', '  /  ', ' /   ', '/‾‾‾ ']
            }
        };

        // Italic (slanted)
        fonts.italic = {
            name: 'italic',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': ['  ?  ', '  ?  ', '     ', '  ?  ', '     '],
                '0': ['  ##/', '#  / ', '#  \\ ', '#  \\ ', ' ##\\ '],
                '1': ['  / ', ' // ', '  / ', '  / ', '////'],
                '2': [' ##/', '   / ', '  /  ', ' /   ', '///  '],
                '3': [' ##/', '   / ', ' //  ', '   / ', '###  '],
                '4': ['#   #', '#  / ', '/////', '   / ', '   / '],
                '5': ['///  ', '/    ', ' ##/ ', '    / ', '###  '],
                '6': ['##/ ', '/    ', '#### ', '/   / ', ' ##\\ '],
                '7': ['/// ', '   / ', '  /  ', ' /   ', '/    '],
                '8': ['##/ ', '/   / ', ' ##/ ', '/   / ', ' ##\\ '],
                '9': ['##/ ', '/   / ', ' ###/ ', '   / ', ' ###/ '],
                'A': ['  / ', ' / \\ ', '/   \\ ', '\\  / ', ' \\ / '],
                'B': ['##/ ', '/  / ', '##/ ', '/  / ', '##/ '],
                'C': [' ##/', '/   ', '/   ', '/   ', ' ##\\'],
                'D': ['##/ ', '/  / ', '/  / ', '/  / ', '##\\'],
                'E': ['///  ', '/    ', '//   ', '/    ', '///  '],
                'F': ['///  ', '/    ', '//   ', '/    ', '/    '],
                'G': [' ##/ ', '/    ', '/  ##', '/   / ', ' ##\\ '],
                'H': ['/  / ', '/  / ', '/////', '/  / ', '/  / '],
                'I': [' /// ', '  /  ', '  /  ', '  /  ', ' /// '],
                'J': ['  ###', '    / ', '    / ', ' /  / ', ' ##/ '],
                'K': ['/   / ', '  //  ', ' //   ', '  //  ', '/   / '],
                'L': ['/    ', '|    ', '|    ', '|    ', '//// '],
                'M': ['/   / ', '\\ // / ', ' / / ', '/   / ', '/   / '],
                'N': [' \\ / ', '\\\\/ / ', ' / / ', '/  \\\\ ', '/   / '],
                'O': [' ##/ ', '/   / ', '/   / ', '/   / ', ' ##\\ '],
                'P': ['##/ ', '/  / ', '##/ ', '/   ', '/   '],
                'Q': [' ##/ ', '/   / ', '/   / ', ' ##/ ', '   \\\\'],
                'R': ['##/ ', '/  / ', '##/ ', '/  / ', '/   / '],
                'S': [' ##/ ', '/    ', ' ##/ ', '    / ', '###  '],
                'T': [' /// ', '  /  ', '  /  ', '  /  ', '  /  '],
                'U': ['/   / ', '/   / ', '/   / ', '/   / ', ' ##/ '],
                'V': ['/   / ', '/   / ', ' / / ', ' / / ', '  /  '],
                'W': ['/   / ', '/   / ', ' / / / ', ' / / / ', '/   / '],
                'X': ['/   / ', ' / / ', '  /  ', ' / \\ ', '/   / '],
                'Y': ['/   / ', ' / / ', '  /  ', '  /  ', '  /  '],
                'Z': [' /// ', '   / ', '  /  ', ' /   ', '//// ']
            }
        };

        // Shadow (3D drop shadow)
        fonts.shadow = {
            name: 'shadow',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' ??? ', '  ?░ ', ' ░   ', '  ?░ ', ' ░░░ '],
                '0': [' ### ', '#  #░', '#  #░', '#  #░', ' ###░'],
                '1': ['  # ░', ' ##░ ', '  #░ ', '  #░ ', ' ###░'],
                '2': [' ###░', '#   #', '   #░', '  # ░', '#####'],
                '3': [' ###░', '   ##', '  ##░', '   ##', ' ###░'],
                '4': ['#   #', '#   #', ' ####', '   #░', '   ##'],
                '5': [' ####', '#   ░', ' ###░', '    #', ' ###░'],
                '6': [' ###░', '#   ░', ' ####', '#   #', ' ###░'],
                '7': ['#####', '   #░', '  #░ ', '  # ░', '  ##░'],
                '8': [' ###░', '#   #', ' ###░', '#   #', ' ###░'],
                '9': [' ###░', '#   #', ' ####', '   ##', ' ###░'],
                'A': [' ### ', '#  #░', ' ####', '#   #', '#   #'],
                'B': [' ####', '#   #', ' ####', '#   #', ' ####'],
                'C': [' ### ', '#   ░', '#    ', '#   ░', ' ### '],
                'D': [' ####', '#   #', '#   #', '#   #', ' ####'],
                'E': [' ####', '#    ', ' ####', '#    ', ' ####'],
                'F': [' ####', '#    ', ' ### ', '#    ', '#    '],
                'G': [' ### ', '#    ', '#  ##', '#   #', ' ### '],
                'H': ['#   #', '#   #', ' ####', '#   #', '#   #'],
                'I': [' ### ', '  #  ', '  #  ', '  #  ', ' ### '],
                'J': ['    #', '    #', '    #', '#   #', ' ### '],
                'K': ['#   #', '  ##', ' #   ', '  ##', '#   #'],
                'L': ['#    ', '#    ', '#    ', '#    ', ' ####'],
                'M': ['#   #', '## ##', '# # #', '#   #', '#   #'],
                'N': ['#   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' ### ', '#   #', '#   #', '#   #', ' ### '],
                'P': [' ####', '#   #', ' #### ', '#    ', '#    '],
                'Q': [' ### ', '#   #', '#   #', ' ####', '   ##'],
                'R': [' ####', '#   #', ' #### ', '#  #░', '#   #'],
                'S': [' ####', '#    ', ' ### ', '    #', ' ####'],
                'T': [' ####', '  #  ', '  #  ', '  #  ', '  #  '],
                'U': ['#   #', '#   #', '#   #', '#   #', ' ### '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['#   #', ' # # ', '  #  ', '  #  ', '  #  '],
                'Z': [' ####', '   # ', '  #  ', ' #   ', ' ####']
            }
        };

        // Retro (80s style with slashes)
        fonts.retro = {
            name: 'retro',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' |?| ', '  ?  ', '     ', '  ?  ', '     '],
                '0': ['|###|', '#   #', '#   #', '#   #', '|###|'],
                '1': ['  |  ', ' ||  ', '  |  ', '  |  ', ' |||'],
                '2': ['|###|', '    #', '  |  ', '  #  ', '|###|'],
                '3': ['|###|', '    #', ' |#| ', '    #', '|###|'],
                '4': ['|   |', '#   #', '|###|', '    #', '    |'],
                '5': ['|###|', '#    ', '|##| ', '    #', '|###|'],
                '6': ['|###|', '#    ', '|###|', '#   #', '|###|'],
                '7': ['|###|', '    #', '   | ', '  |  ', ' |   '],
                '8': ['|###|', '#   #', '|###|', '#   #', '|###|'],
                '9': ['|###|', '#   #', '|####', '    #', '|###|'],
                'A': [' |#| ', ' # # ', '|###|', '#   #', '#   #'],
                'B': ['|##| ', '#   #', '|##| ', '#   #', '|##| '],
                'C': [' |#| ', '#    ', '#    ', '#    ', ' |#| '],
                'D': ['|##| ', '#   #', '#   #', '#   #', '|##| '],
                'E': ['|###|', '#    ', '|### ', '#    ', '|###|'],
                'F': ['|###|', '#    ', '|### ', '#    ', '#    '],
                'G': [' |#| ', '#    ', '# |#|', '#   #', ' |#| '],
                'H': ['#   #', '#   #', '|###|', '#   #', '#   #'],
                'I': ['|###|', '  #  ', '  #  ', '  #  ', '|###|'],
                'J': ['|###|', '   # ', '   # ', '#  # ', ' ##  '],
                'K': ['#   #', '#  | ', '|#   ', '#  | ', '#   #'],
                'L': ['#    ', '#    ', '#    ', '#    ', '|###|'],
                'M': ['#   #', '## ##', '# # #', '#   #', '#   #'],
                'N': ['#   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' |#| ', '#   #', '#   #', '#   #', ' |#| '],
                'P': ['|##| ', '#   #', '|##| ', '#    ', '#    '],
                'Q': [' |#| ', '#   #', '#   #', ' |##|', '    |'],
                'R': ['|##| ', '#   #', '|##| ', '#  | ', '#   #'],
                'S': [' |#| ', '#    ', ' |#| ', '    #', ' |#| '],
                'T': ['|###|', '  #  ', '  #  ', '  #  ', '  #  '],
                'U': ['#   #', '#   #', '#   #', '#   #', ' |#| '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['#   #', ' # # ', '  #  ', '  #  ', '  #  '],
                'Z': ['|###|', '   # ', '  #  ', ' #   ', '|###|']
            }
        };

        // Tech (futuristic)
        fonts.tech = {
            name: 'tech',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' [?] ', ' [?] ', '     ', ' [?] ', '     '],
                '0': ['[###]', '#   #', '#   #', '#   #', '[###]'],
                '1': ['  [# ', ' [## ', '  [# ', '  [# ', '[###]'],
                '2': ['[### ', '    #', '  [  ', '  #  ', '[###]'],
                '3': ['[### ', '    #', ' [## ', '    #', '[###]'],
                '4': ['#   #', '#   #', '[####', '    #', '    #'],
                '5': ['[###]', '#    ', ' [##]', '    #', '[###]'],
                '6': ['[###]', '#    ', '[##] ', '#   #', '[###]'],
                '7': ['[###]', '    #', '   [ ', '  [  ', ' [   '],
                '8': ['[###]', '#   #', '[###]', '#   #', '[###]'],
                '9': ['[###]', '#   #', '[####', '    #', '[###]'],
                'A': [' [#] ', ' # # ', '[###]', '#   #', '#   #'],
                'B': ['[##]', '#   #', '[##]', '#   #', '[##]'],
                'C': [' [#] ', '#    ', '#    ', '#    ', ' [#] '],
                'D': ['[##]', '#   #', '#   #', '#   #', '[##]'],
                'E': ['[###]', '#    ', '[##]', '#    ', '[###]'],
                'F': ['[###]', '#    ', '[##]', '#    ', '#    '],
                'G': [' [#] ', '#    ', '# [#]', '#   #', ' [#] '],
                'H': ['#   #', '#   #', '[###]', '#   #', '#   #'],
                'I': ['[###]', '  #  ', '  #  ', '  #  ', '[###]'],
                'J': ['[###]', '   # ', '   # ', '#  # ', ' [#] '],
                'K': ['#   #', '#  [ ', '[#   ', '#  [ ', '#   #'],
                'L': ['#    ', '#    ', '#    ', '#    ', '[###]'],
                'M': ['#   #', '## ##', '# # #', '#   #', '#   #'],
                'N': ['#   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' [#] ', '#   #', '#   #', '#   #', ' [#] '],
                'P': ['[##]', '#   #', '[##]', '#    ', '#    '],
                'Q': [' [#] ', '#   #', '#   #', ' [##]', '    #'],
                'R': ['[##]', '#   #', '[##]', '#  [ ', '#   #'],
                'S': [' [#] ', '#    ', ' [#] ', '    #', ' [#] '],
                'T': ['[###]', '  #  ', '  #  ', '  #  ', '  #  '],
                'U': ['#   #', '#   #', '#   #', '#   #', ' [#] '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['#   #', ' # # ', '  #  ', '  #  ', '  #  '],
                'Z': ['[###]', '   # ', '  #  ', ' #   ', '[###]']
            }
        };

        // Gothic (medieval/dark)
        fonts.gothic = {
            name: 'gothic',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' |?| ', '  ?  ', '     ', '  ?  ', ' |_| '],
                '0': [' |#| ', '#   #', '#   #', '#   #', ' |#| '],
                '1': ['  |  ', ' ||  ', '  |  ', '  |  ', ' _|_ '],
                '2': [' |#| ', '    #', '  |  ', '  #  ', '  |# '],
                '3': [' |#| ', '    #', ' |#| ', '    #', ' |#| '],
                '4': [' # | ', '#  | ', ' _||_', '    | ', '    | '],
                '5': [' |# | ', '|    ', ' |## ', '    #', ' |## '],
                '6': [' |## ', '|    ', ' |##|', '#   #', ' |##|'],
                '7': [' |##|', '    #', '   | ', '  |  ', ' |   '],
                '8': [' |#| ', '#   #', ' |#| ', '#   #', ' |#| '],
                '9': [' |#| ', '#   #', ' _##|', '    #', ' |##|'],
                'A': [' |#| ', ' # # ', ' ### ', '#   #', '#   #'],
                'B': [' |## ', '#   #', ' |## ', '#   #', ' |##|'],
                'C': [' |## ', '#    ', '|    ', '#    ', ' |##|'],
                'D': [' |## ', '#   #', '|   #', '#   #', ' |##|'],
                'E': [' |## ', '|    ', ' |#  ', '|    ', ' |##|'],
                'F': [' |## ', '|    ', ' |#  ', '|    ', '|    '],
                'G': [' |## ', '|    ', '| _##', '#   #', ' |##|'],
                'H': ['|   |', '#   #', ' ___ ', '#   #', '#   #'],
                'I': [' |## ', '  |  ', '  |  ', '  |  ', ' |##|'],
                'J': [' |##|', '   # ', '   # ', '|  # ', ' |## '],
                'K': ['|   #', '|  | ', ' |   ', '|  | ', '|   #'],
                'L': ['|    ', '|    ', '|    ', '|    ', ' |###'],
                'M': ['|   |', '## ##', '# # #', '#   #', '#   #'],
                'N': ['|   #', '##  #', '# # #', '#  ##', '#   #'],
                'O': [' |#| ', '#   #', '#   #', '#   #', ' |#| '],
                'P': [' |## ', '#   #', ' |## ', '|    ', '|    '],
                'Q': [' |#| ', '#   #', '#   #', ' |##|', '    #'],
                'R': [' |## ', '#   #', ' |## ', '|  ##', '|   #'],
                'S': [' |## ', '|    ', ' |#| ', '    #', ' |## '],
                'T': [' |## ', '  |  ', '  |  ', '  |  ', '  |  '],
                'U': ['|   |', '#   #', '#   #', '#   #', ' |#| '],
                'V': ['#   #', '#   #', '#   #', ' # # ', '  #  '],
                'W': ['#   #', '#   #', '# # #', '## ##', '#   #'],
                'X': ['#   #', ' # # ', '  #  ', ' # # ', '#   #'],
                'Y': ['|   |', ' # # ', '  #  ', '  #  ', '  |  '],
                'Z': [' |## ', '   # ', '  #  ', ' #   ', ' |##|']
            }
        };

        // Neon (bright/electric)
        fonts.neon = {
            name: 'neon',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' *** ', '  *  ', '  *  ', '     ', '  *  '],
                '0': [' *** ', '*   *', '*   *', '*   *', ' *** '],
                '1': ['  *  ', ' **  ', '  *  ', '  *  ', ' *** '],
                '2': [' *** ', '    *', '  *  ', '  *  ', ' *** '],
                '3': [' *** ', '    *', ' **  ', '    *', ' *** '],
                '4': ['*   *', '*   *', ' ****', '    *', '    *'],
                '5': [' *** ', '*    ', ' *** ', '    *', ' *** '],
                '6': [' *** ', '*    ', ' *** ', '*   *', ' *** '],
                '7': [' *** ', '    *', '   * ', '  *  ', ' *   '],
                '8': [' *** ', '*   *', ' *** ', '*   *', ' *** '],
                '9': [' *** ', '*   *', ' ****', '    *', ' *** '],
                'A': [' *** ', '*   *', ' ****', '*   *', '*   *'],
                'B': [' *** ', '*   *', ' *** ', '*   *', ' *** '],
                'C': [' *** ', '*    ', '*    ', '*    ', ' *** '],
                'D': [' *** ', '*   *', '*   *', '*   *', ' *** '],
                'E': [' *** ', '*    ', ' *** ', '*    ', ' *** '],
                'F': [' *** ', '*    ', ' *** ', '*    ', '*    '],
                'G': [' *** ', '*    ', '*  **', '*   *', ' *** '],
                'H': ['*   *', '*   *', ' ****', '*   *', '*   *'],
                'I': [' *** ', '  *  ', '  *  ', '  *  ', ' *** '],
                'J': [' *** ', '   * ', '   * ', '*  * ', ' **  '],
                'K': ['*   *', '*  * ', '***  ', '*  * ', '*   *'],
                'L': ['*    ', '*    ', '*    ', '*    ', ' *** '],
                'M': ['*   *', '** **', '* * *', '*   *', '*   *'],
                'N': ['*   *', '**  *', '* * *', '*  **', '*   *'],
                'O': [' ### ', '*   *', '*   *', '*   *', ' ### '],
                'P': [' *** ', '*   *', ' *** ', '*    ', '*    '],
                'Q': [' *** ', '*   *', '*   *', ' ****', '    *'],
                'R': [' *** ', '*   *', ' *** ', '*  * ', '*   *'],
                'S': [' *** ', '*    ', ' *** ', '    *', ' *** '],
                'T': [' *** ', '  *  ', '  *  ', '  *  ', '  *  '],
                'U': ['*   *', '*   *', '*   *', '*   *', ' *** '],
                'V': ['*   *', '*   *', '*   *', ' * * ', '  *  '],
                'W': ['*   *', '*   *', '* * *', '** **', '*   *'],
                'X': ['*   *', ' * * ', '  *  ', ' * * ', '*   *'],
                'Y': ['*   *', ' * * ', '  *  ', '  *  ', '  *  '],
                'Z': [' *** ', '   * ', '  *  ', ' *   ', ' *** ']
            }
        };

        // Funky (playful/distorted)
        fonts.funky = {
            name: 'funky',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': [' [?] ', ' (?)  ', '      ', ' [?] ', '      '],
                '0': ['(###)', '(   )', '(   )', '(   )', '(###)'],
                '1': [' (~) ', '(~~) ', '  ~  ', '  ~  ', '(~~~)'],
                '2': ['(###)', '    ~', '  ~~', '  ~  ', '(~~~)'],
                '3': ['(###)', '    ~', ' (~~ ', '    ~', '(###)'],
                '4': ['~   ~', '~   ~', ' ~~~~', '    ~', '    ~'],
                '5': ['(~~~)', '~    ', ' (##)', '    ~', '(###)'],
                '6': ['(###)', '~    ', '(~~~)', '~   ~', '(###)'],
                '7': ['(###)', '    ~', '   ~ ', '  ~  ', ' ~   '],
                '8': ['(###)', '~   ~', ' (##)', '~   ~', '(###)'],
                '9': ['(###)', '~   ~', ' (###', '    ~', '(###)'],
                'A': [' (~) ', ' ~ ~ ', '(~~~)', '~   ~', '~   ~'],
                'B': ['(~~)', '~   ~', '(~~)', '~   ~', '(~~)'],
                'C': [' (##)', '~    ', '~    ', '~    ', ' (##)'],
                'D': ['(~~)', '~   ~', '~   ~', '~   ~', '(~~)'],
                'E': ['(###)', '~    ', '(~~~ ', '~    ', '(###)'],
                'F': ['(###)', '~    ', '(~~~ ', '~    ', '#    '],
                'G': [' (##)', '~    ', '~ (##', '~   ~', ' (##)'],
                'H': ['~   ~', '~   ~', '(~~~)', '~   ~', '~   ~'],
                'I': ['(###)', '  ~  ', '  ~  ', '  ~  ', '(###)'],
                'J': ['(###)', '   ~ ', '   ~ ', '~  ~ ', ' (## '],
                'K': ['~   ~', '  ~~ ', '(~   ', '  ~~ ', '~   ~'],
                'L': ['~    ', '~    ', '~    ', '~    ', '(###)'],
                'M': ['~   ~', '~~ ~~', '~ ~ ~', '~   ~', '~   ~'],
                'N': ['~   ~', '~~  ~', '~ ~ ~', '~  ~~', '~   ~'],
                'O': [' (##)', '~   ~', '~   ~', '~   ~', ' (##)'],
                'P': ['(~~)', '~   ~', '(~~)', '~    ', '~    '],
                'Q': [' (##)', '~   ~', '~   ~', ' (##)', '    ~'],
                'R': ['(~~)', '~   ~', '(~~)', '~  ~~', '~   ~'],
                'S': [' (##)', '~    ', ' (##)', '    ~', ' (##)'],
                'T': ['(###)', '  ~  ', '  ~  ', '  ~  ', '  ~  '],
                'U': ['~   ~', '~   ~', '~   ~', '~   ~', ' (##)'],
                'V': ['~   ~', '~   ~', '~   ~', ' ~ ~ ', '  ~  '],
                'W': ['~   ~', '~   ~', '~ ~ ~', '~~ ~~', '~   ~'],
                'X': ['~   ~', ' ~ ~ ', '  ~  ', ' ~ ~ ', '~   ~'],
                'Y': ['~   ~', ' ~ ~ ', '  ~  ', '  ~  ', '  ~  '],
                'Z': ['(###)', '   ~ ', '  ~  ', ' ~   ', '(###)']
            }
        };

        // Wave (undulating)
        fonts.wave = {
            name: 'wave',
            height: 5,
            glyphs: {
                ' ': ['     ', '     ', '     ', '     ', '     '],
                '?': ['  ~  ', '  ~  ', '     ', '  ~  ', '     '],
                '0': [' ~~~  ', '~   ~ ', '~   ~', '~   ~', ' ~~~  '],
                '1': ['   ~ ', '  ~~ ', '   ~ ', '   ~ ', '  ~~~ '],
                '2': [' ~~~ ', '~   ~', '    ~', '  ~  ', '  ~~~~ '],
                '3': [' ~~~ ', '~   ~', '   ~~ ', '~   ~', ' ~~~ '],
                '4': ['~   ~', '~   ~', ' ~~~~', '    ~', '    ~'],
                '5': [' ~~~~ ', '~    ', ' ~~~ ', '    ~', ' ~~~  '],
                '6': [' ~~~ ', '~    ', ' ~~~~ ', '~   ~', ' ~~~ '],
                '7': [' ~~~~ ', '    ~', '   ~ ', '  ~  ', ' ~   '],
                '8': [' ~~~ ', '~   ~', ' ~~~ ', '~   ~', ' ~~~ '],
                '9': [' ~~~ ', '~   ~', ' ~~~~', '    ~', ' ~~~ '],
                'A': ['  ~  ', ' ~ ~ ', '~   ~', ' ~~~~ ', '~   ~'],
                'B': [' ~~~ ', '~   ~', ' ~~~ ', '~   ~', ' ~~~ '],
                'C': [' ~~~ ', '~    ', '~    ', '~    ', ' ~~~ '],
                'D': [' ~~~ ', '~   ~', '~   ~', '~   ~', ' ~~~ '],
                'E': [' ~~~~ ', '~    ', ' ~~~ ', '~    ', ' ~~~~ '],
                'F': [' ~~~~ ', '~    ', ' ~~~ ', '~    ', '~    '],
                'G': [' ~~~ ', '~    ', '~  ~~ ', '~   ~', ' ~~~ '],
                'H': ['~   ~', '~   ~', ' ~~~~', '~   ~', '~   ~'],
                'I': [' ~~~ ', '  ~  ', '  ~  ', '  ~  ', ' ~~~ '],
                'J': [' ~~~ ', '   ~ ', '   ~ ', '~  ~ ', ' ~~  '],
                'K': ['~   ~', '  ~~ ', ' ~   ', '  ~~ ', '~   ~'],
                'L': ['~    ', '~    ', '~    ', '~    ', ' ~~~~ '],
                'M': ['~   ~', '~~ ~~', '~ ~ ~', '~   ~', '~   ~'],
                'N': ['~   ~', '~~  ~', '~ ~ ~', '~  ~~', '~   ~'],
                'O': [' (##)', '~   ~', '~   ~', '~   ~', ' (##)'],
                'P': [' (##)', '~   ~', ' (##)', '~    ', '~    '],
                'Q': [' (##)', '~   ~', '~   ~', ' (##)', '    ~'],
                'R': [' (##)', '~   ~', ' (##)', '~  ~~ ', '~   ~'],
                'S': [' (##)', '~    ', ' (##)', '    ~', ' (##)'],
                'T': [' ~~~~ ', '  ~  ', '  ~  ', '  ~  ', '  ~  '],
                'U': ['~   ~', '~   ~', '~   ~', '~   ~', ' (##)'],
                'V': ['~   ~', '~   ~', '~   ~', ' ~ ~ ', '  ~  '],
                'W': ['~   ~', '~   ~', '~ ~ ~', '~~ ~~', '~   ~'],
                'X': ['~   ~', ' ~ ~ ', '  ~  ', ' ~ ~ ', '~   ~'],
                'Y': ['~   ~', ' ~ ~ ', '  ~  ', '  ~  ', '  ~  '],
                'Z': [' ~~~~ ', '   ~ ', '  ~  ', ' ~   ', ' ~~~~ ']
            }
        };

        this.fonts = fonts;
    }

    _makeBlockVariant(glyphs) {
        const out = {};
        for (const k of Object.keys(glyphs)) {
            out[k] = glyphs[k].map(row => row.replace(/#/g, '█'));
        }
        return out;
    }

    getFont(name) {
        this.ensureFonts();
        const key = (name || 'standard').toLowerCase();
        return this.fonts[key] || this.fonts.standard;
    }

    getAvailableFonts() {
        return ['standard', 'block', 'mini', 'small', 'bubble', '3d', 'outlined', 'italic', 'shadow', 'retro', 'tech', 'gothic', 'neon', 'funky', 'wave'];
    }
}

// Renderer with flexible error recovery
const USE_ASCII_RENDERER = true;
const DEBUG_MODE = false;  // Set to true for detailed logs

class ASCIIRenderer {
    constructor() {
        this.lastError = null;
        this.fallbackChar = '?';
        this.maxLineLength = 500;  // Prevent extremely long lines
        this.maxLines = 100;       // Prevent massive outputs
    }

    log(message) {
        if (DEBUG_MODE) console.log(`[Renderer] ${message}`);
    }

    renderTextWithFont(text, font) {
        try {
            this.lastError = null;
            const input = String(text || '').trim();

            // Input validation
            if (!input) {
                return ''; // Empty input returns empty
            }

            if (!this.validateFont(font)) {
                throw new Error('Invalid font object structure');
            }

            if (!USE_ASCII_RENDERER) {
                this.log('Fallback: Echo mode enabled');
                return input;
            }

            // Sanitize and truncate input
            const sanitized = this.sanitizeInput(input);
            const lines = sanitized.split('\n');

            if (lines.length > this.maxLines) {
                this.log(`Input truncated: ${lines.length} lines → ${this.maxLines}`);
                lines.length = this.maxLines;
            }

            // Render each line
            const outLines = [];
            for (let i = 0; i < lines.length; i++) {
                try {
                    const renderedLine = this.renderLine(lines[i], font);
                    outLines.push(renderedLine);
                } catch (lineError) {
                    this.log(`Warning: Line ${i + 1} failed: ${lineError.message}`);
                    // Add fallback line with character substitution
                    outLines.push(this.createFallbackLine(lines[i], font));
                }
            }

            return outLines.join('\n');
        } catch (error) {
            this.lastError = error;
            console.error('❌ Renderer fatal error:', error);
            // Return input as-is on total failure
            return String(text || '').trim();
        }
    }

    validateFont(font) {
        if (!font || typeof font !== 'object') {
            return false;
        }
        if (!font.glyphs || typeof font.glyphs !== 'object') {
            return false;
        }
        if (!Number.isInteger(font.height) || font.height < 1 || font.height > 10) {
            return false;
        }
        return true;
    }

    sanitizeInput(input) {
        // Remove control characters but preserve newlines
        return input
            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '')
            .substring(0, 10000); // Hard limit
    }

    renderLine(line, font) {
        if (!line || line.trim().length === 0) {
            return ''; // Empty line
        }

        const rowBuffers = Array.from({ length: font.height }, () => []);
        const chars = line.toUpperCase().split('');
        let charCount = 0;

        for (const ch of chars) {
            try {
                const glyph = font.glyphs[ch] || font.glyphs[this.fallbackChar];

                if (!glyph) {
                    throw new Error(`No glyph for '${ch}' or fallback`);
                }

                if (!Array.isArray(glyph) || glyph.length !== font.height) {
                    throw new Error(`Malformed glyph for '${ch}': expected ${font.height} rows, got ${glyph?.length || 0}`);
                }

                // Add glyph rows
                for (let r = 0; r < font.height; r++) {
                    const row = String(glyph[r] || '');
                    if (!row) {
                        throw new Error(`Empty row ${r} in glyph for '${ch}'`);
                    }
                    rowBuffers[r].push(row);
                }

                // Column gap
                for (let r = 0; r < font.height; r++) {
                    rowBuffers[r].push(' ');
                }

                charCount++;
            } catch (charError) {
                this.log(`Char error for '${ch}': ${charError.message}`);
                // Fallback: add placeholder glyph
                for (let r = 0; r < font.height; r++) {
                    rowBuffers[r].push('?');
                }
                for (let r = 0; r < font.height; r++) {
                    rowBuffers[r].push(' ');
                }
            }
        }

        // Build output rows
        const outputRows = [];
        for (let r = 0; r < font.height; r++) {
            const row = rowBuffers[r].join('').replace(/\s+$/g, '');
            
            // Check line length
            if (row.length > this.maxLineLength) {
                this.log(`Line ${r + 1} truncated: ${row.length} → ${this.maxLineLength}`);
                outputRows.push(row.substring(0, this.maxLineLength));
            } else {
                outputRows.push(row);
            }
        }

        return outputRows.join('\n');
    }

    createFallbackLine(line, font) {
        // When a line fails, create a simple fallback representation
        const safeChars = line
            .toUpperCase()
            .replace(/[^A-Z0-9\s]/g, '?')
            .substring(0, 50);
        
        const rows = [];
        for (let r = 0; r < font.height; r++) {
            rows.push(r === Math.floor(font.height / 2) ? `[${safeChars}]` : '');
        }
        return rows.join('\n');
    }

    getLastError() {
        return this.lastError;
    }

    clearError() {
        this.lastError = null;
    }
}

// Poetry Formatter - handles poem formatting with borders
class PoetryFormatter {
    constructor() {
        this.borderStyles = {
            'none': { top: '', middle: '', bottom: '', left: '', right: '' },
            'box': { top: '━', middle: '─', bottom: '━', left: '│', right: '│' },
            'double': { top: '═', middle: '═', bottom: '═', left: '║', right: '║' },
            'rounded': { top: '─', middle: '─', bottom: '─', left: '│', right: '│' },
            'stars': { top: '✦', middle: '✦', bottom: '✦', left: '✦', right: '✦' },
            'dashes': { top: '─', middle: '─', bottom: '─', left: '─', right: '─' },
            'thick': { top: '█', middle: '█', bottom: '█', left: '█', right: '█' }
        };
        this.maxLineWidth = 80;
    }

    formatPoem(text, borderStyle = 'none', padding = 2) {
        try {
            const lines = text.trim().split('\n');
            const border = this.borderStyles[borderStyle] || this.borderStyles.none;
            
            // Find the longest line
            let maxWidth = Math.max(...lines.map(l => l.length));
            maxWidth = Math.min(maxWidth + (padding * 2), this.maxLineWidth);

            // Create formatted output
            const output = [];

            // Top border
            if (border.top) {
                output.push(border.top.repeat(maxWidth + 4));
            }

            // Poem lines with padding
            for (const line of lines) {
                const paddedLine = line.padEnd(maxWidth);
                const formatted = `${border.left} ${paddedLine.substring(0, maxWidth)} ${border.right}`;
                output.push(formatted);
            }

            // Bottom border
            if (border.bottom) {
                output.push(border.bottom.repeat(maxWidth + 4));
            }

            return output.join('\n');
        } catch (error) {
            console.error('❌ Poetry formatting error:', error);
            // Fallback: just return the text with simple padding
            return text.split('\n').map(line => `  ${line}  `).join('\n');
        }
    }
}

// Color utilities
const colorCodes = {
    'red': '\x1b[31m',
    'green': '\x1b[32m',
    'yellow': '\x1b[33m',
    'blue': '\x1b[34m',
    'magenta': '\x1b[35m',
    'cyan': '\x1b[36m',
    'white': '\x1b[37m',
    'reset': '\x1b[0m'
};

function applyColorClass(color) {
    if (color && color !== 'none') {
        return `color-${color}`;
    }
    return '';
}

// Main app with modes
class SimpleASCIIArt {
    constructor() {
        this.fontManager = null;
        this.asciiRenderer = null;
        this.poetryFormatter = null;
        this.isGenerating = false;
        this.lastValidState = null;
        this.generationTimeout = 5000;
        this.fontChangeDelay = 300;
        this.fontChangeTimer = null;
        this.currentMode = 'text';  // 'text' or 'poetry'
        this.init();
    }

    async init() {
        console.log('🚀 Simple ASCII Art Generator - Initializing...');

        try {
            this.fontManager = new FontManager();
            this.asciiRenderer = new ASCIIRenderer();
            this.poetryFormatter = new PoetryFormatter();
            this.cacheDOM();
            this.validateDOM();
            this.syncFontSelect();
            this.attachEventListeners();
            this.setupModeButtons();
            this.setDefaultFont();
            console.log('✅ Simple ASCII Art Generator - Ready!');
            console.log('💡 Enter text and click "Generate ASCII Art" to begin');
        } catch (error) {
            console.error('❌ Initialization failed:', error);
            this.showError('Failed to initialize application. Please refresh the page.');
            throw error;
        }
    }

    cacheDOM() {
        this.textInput = document.getElementById('text-input');
        this.fontSelect = document.getElementById('font-select');
        this.generateBtn = document.getElementById('generate-main');
        this.output = document.getElementById('ascii-output');
        this.colorSelect = document.getElementById('color-select');
        this.borderSelect = document.getElementById('border-select');
        this.poetryColorSelect = document.getElementById('poetry-color-select');
        this.colorGroup = document.getElementById('color-group');
        this.borderGroup = document.getElementById('border-group');
        this.poetryColorGroup = document.getElementById('poetry-color-group');
        this.textInputLabel = document.getElementById('text-input-label');
        this.inputTitle = document.getElementById('input-title');
        this.modeTextBtn = document.getElementById('mode-text');
        this.modePoetryBtn = document.getElementById('mode-poetry');

        if (!this.textInput || !this.fontSelect || !this.generateBtn || !this.output) {
            throw new Error('Required DOM elements not found');
        }

        console.log('📋 DOM elements cached');
    }

    validateDOM() {
        const checks = [
            { el: this.textInput, name: 'text input' },
            { el: this.fontSelect, name: 'font selector' },
            { el: this.generateBtn, name: 'generate button' },
            { el: this.output, name: 'output area' }
        ];

        for (const check of checks) {
            if (!check.el || typeof check.el.addEventListener !== 'function') {
                throw new Error(`DOM element "${check.name}" is not valid`);
            }
        }

        console.log('✅ DOM elements validated');
    }

    setupModeButtons() {
        if (this.modeTextBtn) {
            this.modeTextBtn.addEventListener('click', () => this.setMode('text'));
        }
        if (this.modePoetryBtn) {
            this.modePoetryBtn.addEventListener('click', () => this.setMode('poetry'));
        }
    }

    setMode(mode) {
        if (mode === this.currentMode) return;

        this.currentMode = mode;
        console.log(`🔄 Switched to ${mode} mode`);

        // Update UI
        if (mode === 'text') {
            this.modeTextBtn?.classList.add('active');
            this.modePoetryBtn?.classList.remove('active');
            this.inputTitle.textContent = 'ASCII Art Generator';
            this.textInputLabel.textContent = 'Enter your text:';
            this.colorGroup.style.display = 'block';
            this.borderGroup.style.display = 'none';
            this.poetryColorGroup.style.display = 'none';
            this.fontSelect.style.display = 'block';
        } else {
            this.modePoetryBtn?.classList.add('active');
            this.modeTextBtn?.classList.remove('active');
            this.inputTitle.textContent = 'Poetry Formatter';
            this.textInputLabel.textContent = 'Enter your poem:';
            this.colorGroup.style.display = 'none';
            this.borderGroup.style.display = 'block';
            this.poetryColorGroup.style.display = 'block';
            this.fontSelect.style.display = 'none';
        }

        // Regenerate if text exists
        if (this.textInput.value.trim()) {
            this.handleGenerate();
        }
    }

    syncFontSelect() {
        if (!this.fontSelect) return;
        try {
            const fonts = this.fontManager.getAvailableFonts();
            this.fontSelect.innerHTML = '';
            for (const name of fonts) {
                const opt = document.createElement('option');
                opt.value = name;
                opt.textContent = name.charAt(0).toUpperCase() + name.slice(1);
                this.fontSelect.appendChild(opt);
            }
            console.log(`📝 Font dropdown synced: ${fonts.length} fonts`);
        } catch (error) {
            console.error('❌ Failed to sync font selector:', error);
            this.showError('Font selector initialization failed');
        }
    }

    attachEventListeners() {
        try {
            this.generateBtn.addEventListener('click', () => {
                this.handleGenerate();
            });

            this.textInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && e.ctrlKey) {
                    this.handleGenerate();
                }
            });

            this.fontSelect.addEventListener('change', () => {
                this.handleFontChange();
            });

            this.colorSelect?.addEventListener('change', () => {
                if (this.textInput.value.trim()) {
                    this.handleGenerate();
                }
            });

            this.borderSelect?.addEventListener('change', () => {
                if (this.textInput.value.trim()) {
                    this.handleGenerate();
                }
            });

            this.poetryColorSelect?.addEventListener('change', () => {
                if (this.textInput.value.trim()) {
                    this.handleGenerate();
                }
            });

            console.log('🔗 Event listeners attached');
        } catch (error) {
            console.error('❌ Failed to attach event listeners:', error);
            throw error;
        }
    }

    handleFontChange() {
        if (this.fontChangeTimer) {
            clearTimeout(this.fontChangeTimer);
        }

        this.fontChangeTimer = setTimeout(() => {
            if (this.textInput.value.trim()) {
                console.log('🔄 Font changed, regenerating...');
                this.handleGenerate();
            }
        }, this.fontChangeDelay);
    }

    setDefaultFont() {
        if (this.fontSelect) {
            try {
                this.fontSelect.value = 'standard';
            } catch (error) {
                console.warn('⚠️ Failed to set default font:', error);
            }
        }
    }

    async handleGenerate() {
        if (this.isGenerating) {
            console.warn('⚠️ Generation already in progress');
            this.showNotification('⏳ Please wait, generation in progress...', 'warning');
            return;
        }

        const text = this.textInput?.value?.trim();
        if (!text) {
            this.showNotification('⚠️ Please enter some text', 'warning');
            return;
        }

        if (text.length > 5000) {
            this.showNotification('⚠️ Text is too long (max 5000 chars)', 'warning');
            return;
        }

        try {
            this.isGenerating = true;
            this.updateButtonState();
            console.log(`⚙️ Generating ${this.currentMode}...`);

            let result;
            if (this.currentMode === 'text') {
                result = await this.generateText(text);
            } else {
                result = await this.generatePoetry(text);
            }

            this.lastValidState = result;
            this.displayOutput(result);
            console.log('✅ Generation complete');

        } catch (error) {
            console.error('❌ Generation failed:', error);
            
            if (error.message === 'Generation timeout') {
                this.showError('Generation took too long. Try shorter text.');
            } else {
                this.showError(`Generation failed: ${error.message}`);
            }

            if (this.lastValidState) {
                console.log('🔄 Rolling back to last valid state...');
                this.displayOutput(this.lastValidState);
            }

        } finally {
            this.isGenerating = false;
            this.updateButtonState();
        }
    }

    async generateText(text) {
        try {
            const fontName = this.fontSelect?.value || 'standard';
            const available = this.fontManager.getAvailableFonts();
            const finalFont = available.includes(fontName) ? fontName : 'standard';

            const font = this.fontManager.getFont(finalFont);
            if (!this.asciiRenderer.validateFont(font)) {
                throw new Error('Font validation failed');
            }

            const ascii = this.asciiRenderer.renderTextWithFont(text, font);
            if (!ascii) {
                throw new Error('Rendering returned empty');
            }

            const color = this.colorSelect?.value || 'none';

            return {
                ascii: ascii,
                font: finalFont,
                text: text,
                color: color,
                mode: 'text',
                timestamp: Date.now(),
                success: true
            };
        } catch (error) {
            throw new Error(`Text generation error: ${error.message}`);
        }
    }

    async generatePoetry(text) {
        try {
            const borderStyle = this.borderSelect?.value || 'box';
            const color = this.poetryColorSelect?.value || 'none';
            
            const formatted = this.poetryFormatter.formatPoem(text, borderStyle, 1);

            return {
                ascii: formatted,
                border: borderStyle,
                color: color,
                mode: 'poetry',
                text: text,
                timestamp: Date.now(),
                success: true
            };
        } catch (error) {
            throw new Error(`Poetry generation error: ${error.message}`);
        }
    }

    displayOutput(result) {
        try {
            if (!this.output) {
                throw new Error('Output element not found');
            }

            if (!result || !result.ascii) {
                throw new Error('Invalid result object');
            }

            this.output.textContent = result.ascii;
            this.output.className = 'ascii-output';

            // Apply color class
            if (result.color && result.color !== 'none') {
                this.output.classList.add(`color-${result.color}`);
            }

            // Apply border class for poetry
            if (result.mode === 'poetry' && result.border && result.border !== 'none') {
                this.output.classList.add(`poetry-border-${result.border}`);
                this.output.style.padding = '15px';
                this.output.style.paddingLeft = '20px';
                this.output.style.paddingRight = '20px';
            } else {
                this.output.style.padding = '10px';
            }

            this.output.setAttribute('data-mode', result.mode);
            this.output.setAttribute('data-timestamp', result.timestamp);

            console.log(`✨ Output displayed (${result.ascii.length} chars, mode: ${result.mode})`);
        } catch (error) {
            console.error('❌ Display failed:', error);
            if (this.output) {
                this.output.textContent = '';
                this.output.className = 'ascii-output error';
            }
            throw error;
        }
    }

    updateButtonState() {
        if (!this.generateBtn) return;

        try {
            this.generateBtn.disabled = this.isGenerating;
            this.generateBtn.classList.toggle('generating', this.isGenerating);

            if (this.isGenerating) {
                this.generateBtn.textContent = '⏳ Generating...';
            } else {
                this.generateBtn.textContent = '✨ Generate';
            }
        } catch (error) {
            console.error('❌ Failed to update button state:', error);
        }
    }

    showNotification(message, type = 'info') {
        const typeIcon = {
            'info': '💬',
            'warning': '⚠️',
            'error': '❌',
            'success': '✅'
        };

        const icon = typeIcon[type] || '💬';
        console.log(`${icon} ${type.toUpperCase()}: ${message}`);

        if (type === 'error' && this.output) {
            try {
                this.output.textContent = `${icon} ${message}`;
                this.output.className = 'ascii-output error';
            } catch (e) {
                console.error('Failed to show error notification:', e);
            }
        }
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    recover() {
        try {
            console.log('🔄 Attempting recovery...');
            this.isGenerating = false;
            this.updateButtonState();
            if (this.lastValidState) {
                this.displayOutput(this.lastValidState);
                console.log('✅ Recovered to last valid state');
            }
        } catch (error) {
            console.error('❌ Recovery failed:', error);
        }
    }
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', () => {
    console.log('🎨 Starting Simple ASCII Art Generator...');
    new SimpleASCIIArt();
});
