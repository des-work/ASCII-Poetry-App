// ASCII Art Generator - Main JavaScript File

class ASCIIArtGenerator {
    constructor() {
        try {
            // Constants
            this.MAX_TEXT_LENGTH = 5000;
            this.MAX_KEYWORDS = 20;
            this.MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB
            this.SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
            
            // State
            this.currentTheme = 'dark';
            this.currentTitleIndex = 0;
            this.titleFonts = ['block', '3d', 'star', 'pixel', 'bubble', 'slant', 'gothic'];
            this.keywords = new Set();
            this.isGenerating = false;
            this.currentImage = null;
            
            // Initialize
            this.initializeEventListeners();
            this.initializeTheme();
            this.initializeAnimatedTitle();
            this.addAsciiDecorations();
            this.initializeKeywordSystem();
        } catch (error) {
            console.error('Failed to initialize ASCIIArtGenerator:', error);
            this.showNotification('‚ùå Failed to initialize app. Please refresh the page.');
        }
    }

    initializeEventListeners() {
        try {
            console.log('üîß Initializing event listeners...');
            
            // Tab switching
            document.querySelectorAll('.tab-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const tab = e?.target?.dataset?.tab;
                    console.log('üìë Tab clicked:', tab);
                    if (tab) this.switchTab(tab);
                });
            });

            // Text generation
            const generateTextBtn = document.getElementById('generate-text');
            if (generateTextBtn) {
                console.log('‚úÖ Text generate button found');
                generateTextBtn.addEventListener('click', () => {
                    console.log('üé® Generate Text ASCII button clicked!');
                    this.generateTextASCII();
                });
            } else {
                console.error('‚ùå Text generate button NOT found');
            }
            
            // Image generation
            const generateImageBtn = document.getElementById('generate-image');
            if (generateImageBtn) {
                console.log('‚úÖ Image generate button found');
                generateImageBtn.addEventListener('click', () => {
                    console.log('üñºÔ∏è Generate Image ASCII button clicked!');
                    this.generateImageASCII();
                });
            } else {
                console.error('‚ùå Image generate button NOT found');
            }
            
            // Poetry generation
            const generatePoetryBtn = document.getElementById('generate-poetry');
            if (generatePoetryBtn) {
                console.log('‚úÖ Poetry generate button found');
                generatePoetryBtn.addEventListener('click', () => {
                    console.log('üìù Generate Poetry ASCII button clicked!');
                    this.generatePoetryASCII();
                });
            } else {
                console.error('‚ùå Poetry generate button NOT found');
            }
            
            // Image input
            const imageInput = document.getElementById('image-input');
            if (imageInput) {
                imageInput.addEventListener('change', (e) => this.handleImageUpload(e));
            }
            
            // Width slider
            const widthSlider = document.getElementById('image-width');
            const widthValue = document.getElementById('width-value');
            if (widthSlider && widthValue) {
                widthSlider.addEventListener('input', (e) => {
                    widthValue.textContent = e.target.value;
                });
            }

            // Output controls
            const copyBtn = document.getElementById('copy-btn');
            if (copyBtn) {
                copyBtn.addEventListener('click', () => this.copyToClipboard());
            }
            
            const downloadBtn = document.getElementById('download-btn');
            if (downloadBtn) {
                downloadBtn.addEventListener('click', () => this.downloadASCII());
            }
            
            const clearBtn = document.getElementById('clear-btn');
            if (clearBtn) {
                clearBtn.addEventListener('click', () => this.clearOutput());
            }

            // Theme toggle
            const themeBtn = document.getElementById('theme-btn');
            if (themeBtn) {
                themeBtn.addEventListener('click', () => this.toggleTheme());
            }
            
            console.log('‚úÖ Event listeners initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing event listeners:', error);
        }
    }

    initializeTheme() {
        try {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            this.setTheme(savedTheme);
        } catch (error) {
            console.error('Error initializing theme:', error);
            this.setTheme('dark');
        }
    }

    switchTab(tabName) {
        try {
            if (!tabName || typeof tabName !== 'string') {
                console.warn('Invalid tab name:', tabName);
                return;
            }

            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            const tabButton = document.querySelector(`[data-tab="${tabName}"]`);
            if (tabButton) {
                tabButton.classList.add('active');
            }

            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            const tabContent = document.getElementById(`${tabName}-tab`);
            if (tabContent) {
                tabContent.classList.add('active');
            }
        } catch (error) {
            console.error('Error switching tabs:', error);
        }
    }

    async generateTextASCII() {
        console.log('üé® generateTextASCII called');
        
        // Prevent concurrent generation
        if (this.isGenerating) {
            console.warn('‚ö†Ô∏è Already generating...');
            this.showNotification('‚ö†Ô∏è Please wait for current generation to complete!');
            return;
        }

        try {
            this.isGenerating = true;
            console.log('üöÄ Starting text generation...');
            
            const textInput = document.getElementById('text-input');
            const fontSelect = document.getElementById('font-select');
            const colorSelect = document.getElementById('color-select');
            const animationSelect = document.getElementById('animation-select');

            if (!textInput || !fontSelect || !colorSelect || !animationSelect) {
                throw new Error('Required elements not found');
            }

            const text = this.sanitizeInput(textInput.value.trim());
            
            // Validate input
            if (!text) {
                this.showNotification('‚ö†Ô∏è Please enter some text first!');
                return;
            }

            if (text.length > this.MAX_TEXT_LENGTH) {
                this.showNotification(`‚ö†Ô∏è Text too long! Maximum ${this.MAX_TEXT_LENGTH} characters.`);
                return;
            }

            const font = fontSelect.value || 'standard';
            const color = colorSelect.value || 'none';
            const animation = animationSelect.value || 'none';

            this.showLoading();
            await new Promise(resolve => setTimeout(resolve, 500)); // Small delay for effect
            
            const asciiArt = await this.convertTextToASCII(text, font);
            
            if (!asciiArt) {
                throw new Error('Failed to generate ASCII art');
            }
            
            this.displayASCII(asciiArt, color, animation);
            this.showNotification('‚ú® ASCII art generated successfully!');
        } catch (error) {
            console.error('Error generating ASCII art:', error);
            this.showNotification('‚ùå Error generating ASCII art. Please try again.');
        } finally {
            this.hideLoading();
            this.isGenerating = false;
        }
    }

    sanitizeInput(input) {
        if (typeof input !== 'string') {
            return '';
        }
        // Remove potentially dangerous characters but keep ASCII art friendly ones
        return input.replace(/[<>]/g, '');
    }

    validateImageFile(file) {
        if (!file) {
            return { valid: false, error: 'No file selected' };
        }

        if (!this.SUPPORTED_IMAGE_TYPES.includes(file.type)) {
            return { 
                valid: false, 
                error: `Unsupported file type. Please use: ${this.SUPPORTED_IMAGE_TYPES.join(', ')}` 
            };
        }

        if (file.size > this.MAX_IMAGE_SIZE) {
            return { 
                valid: false, 
                error: `File too large. Maximum size: ${this.MAX_IMAGE_SIZE / (1024 * 1024)}MB` 
            };
        }

        return { valid: true };
    }

    showNotification(message) {
        try {
            if (!message || typeof message !== 'string') {
                console.warn('Invalid notification message:', message);
                return;
            }

            // Create notification element if it doesn't exist
            let notification = document.getElementById('notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'notification';
                notification.style.cssText = `
                    position: fixed;
                    top: 80px;
                    right: 20px;
                    background: linear-gradient(135deg, rgba(18, 18, 26, 0.95) 0%, rgba(26, 26, 40, 0.95) 100%);
                    color: var(--text-primary);
                    padding: 12px 20px;
                    border-radius: 8px;
                    border: 1px solid rgba(102, 126, 234, 0.3);
                    font-family: 'JetBrains Mono', monospace;
                    font-size: 0.85rem;
                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
                    z-index: 10000;
                    opacity: 0;
                    transition: opacity 0.3s ease, transform 0.3s ease;
                    transform: translateY(-10px);
                `;
                document.body.appendChild(notification);
            }

            notification.textContent = message;
            notification.style.opacity = '1';
            notification.style.transform = 'translateY(0)';

            setTimeout(() => {
                if (notification) {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateY(-10px)';
                }
            }, 3000);
        } catch (error) {
            console.error('Error showing notification:', error);
        }
    }

    async convertTextToASCII(text, font) {
        // ASCII art fonts using figlet-like patterns
        const fonts = {
            standard: this.getStandardFont(),
            block: this.getBlockFont(),
            bubble: this.getBubbleFont(),
            lean: this.getLeanFont(),
            mini: this.getMiniFont(),
            script: this.getScriptFont(),
            slant: this.getSlantFont(),
            small: this.getSmallFont(),
            big: this.getBigFont()
        };

        const selectedFont = fonts[font] || fonts.standard;
        return this.renderTextWithFont(text.toUpperCase(), selectedFont);
    }

    renderTextWithFont(text, font) {
        const lines = [];
        const height = font.A.length;
        
        for (let i = 0; i < height; i++) {
            let line = '';
            for (const char of text) {
                if (font[char] && font[char][i]) {
                    line += font[char][i];
                } else {
                    line += ' '.repeat(font.A[i].length);
                }
            }
            lines.push(line);
        }
        
        return lines.join('\n');
    }

    async generateImageASCII() {
        console.log('üñºÔ∏è generateImageASCII called');
        
        // Prevent concurrent generation
        if (this.isGenerating) {
            console.warn('‚ö†Ô∏è Already generating...');
            this.showNotification('‚ö†Ô∏è Please wait for current generation to complete!');
            return;
        }

        try {
            this.isGenerating = true;
            console.log('üöÄ Starting image generation...');
            
            const fileInput = document.getElementById('image-input');
            if (!fileInput || !fileInput.files[0]) {
                this.showNotification('‚ö†Ô∏è Please select an image first!');
                this.isGenerating = false;
                return;
            }

            const widthInput = document.getElementById('image-width');
            const charSetSelect = document.getElementById('image-chars');
            const colorModeSelect = document.getElementById('image-color');
            
            if (!widthInput || !charSetSelect || !colorModeSelect) {
                throw new Error('Required image input elements not found');
            }

            const width = parseInt(widthInput.value);
            const charSet = charSetSelect.value;
            const colorMode = colorModeSelect.value;

            console.log(`üìä Image settings: width=${width}, charSet=${charSet}, colorMode=${colorMode}`);

            this.showLoading();
            const asciiArt = await this.convertImageToASCII(fileInput.files[0], width, charSet, colorMode);
            this.displayASCII(asciiArt, 'none', 'none');
            this.showNotification('‚ú® Image converted to ASCII art!');
            console.log('‚úÖ Image generation complete');
        } catch (error) {
            console.error('‚ùå Error generating image ASCII:', error);
            this.showNotification('‚ùå Error generating ASCII art. Please try again.');
        } finally {
            this.hideLoading();
            this.isGenerating = false;
        }
    }

    async generatePoetryASCII() {
        console.log('üìù generatePoetryASCII called');
        
        // Prevent concurrent generation
        if (this.isGenerating) {
            console.warn('‚ö†Ô∏è Already generating...');
            this.showNotification('‚ö†Ô∏è Please wait for current generation to complete!');
            return;
        }

        try {
            this.isGenerating = true;
            console.log('üöÄ Starting poetry generation...');
            
            const poemInput = document.getElementById('poem-input');
            if (!poemInput) {
                throw new Error('Poem input element not found');
            }

            const poem = poemInput.value.trim();
            if (!poem) {
                this.showNotification('‚ö†Ô∏è Please enter a poem first!');
                this.isGenerating = false;
                return;
            }

            const fontSelect = document.getElementById('poetry-font-select');
            const layoutSelect = document.getElementById('poetry-layout');
            const colorSelect = document.getElementById('poetry-color-select');
            const animationSelect = document.getElementById('poetry-animation-select');
            const decorationSelect = document.getElementById('poetry-decoration');

            if (!fontSelect || !layoutSelect || !colorSelect || !animationSelect || !decorationSelect) {
                throw new Error('Required poetry input elements not found');
            }

            const font = fontSelect.value;
            const layout = layoutSelect.value;
            const color = colorSelect.value;
            const animation = animationSelect.value;
            const decoration = decorationSelect.value;

            console.log(`üìä Poetry settings: font=${font}, layout=${layout}, color=${color}, keywords=${this.keywords.size}`);

            this.showLoading();
            await new Promise(resolve => setTimeout(resolve, 500)); // Small delay for effect
            const asciiArt = await this.convertPoetryToASCII(poem, font, layout, decoration);
            this.displayPoetryASCII(asciiArt, color, animation, layout, decoration);
            this.showNotification('‚ú® Poetry art created beautifully!');
            console.log('‚úÖ Poetry generation complete');
        } catch (error) {
            console.error('‚ùå Error generating poetry ASCII:', error);
            this.showNotification('‚ùå Error generating poetry ASCII art. Please try again.');
        } finally {
            this.hideLoading();
            this.isGenerating = false;
        }
    }

    async convertImageToASCII(file, width, charSet, colorMode) {
        return new Promise((resolve) => {
            const img = new Image();
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            img.onload = () => {
                const aspectRatio = img.height / img.width;
                const height = Math.floor(width * aspectRatio);
                
                canvas.width = width;
                canvas.height = height;
                
                ctx.drawImage(img, 0, 0, width, height);
                const imageData = ctx.getImageData(0, 0, width, height);
                
                const chars = this.getCharacterSet(charSet);
                let asciiArt = '';
                
                for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                        const pixelIndex = (y * width + x) * 4;
                        const r = imageData.data[pixelIndex];
                        const g = imageData.data[pixelIndex + 1];
                        const b = imageData.data[pixelIndex + 2];
                        const brightness = (r + g + b) / 3;
                        
                        const charIndex = Math.floor((brightness / 255) * (chars.length - 1));
                        asciiArt += chars[charIndex];
                    }
                    asciiArt += '\n';
                }
                
                resolve(asciiArt);
            };

            img.src = URL.createObjectURL(file);
        });
    }

    getCharacterSet(setName) {
        const sets = {
            standard: '@#%&*+=~-:,.`',
            blocks: '‚ñà‚ñì‚ñí‚ñë',
            dots: '‚óè‚óã‚óØ',
            simple: '#*+.',
            detailed: '@#$%&*+=~-:,.`'
        };
        return sets[setName] || sets.standard;
    }

    displayASCII(asciiArt, color, animation) {
        const output = document.getElementById('ascii-output');
        output.textContent = asciiArt;
        
        // Remove existing classes
        output.className = 'ascii-output';
        
        // Apply color
        if (color !== 'none') {
            this.applyColor(output, color);
        }
        
        // Apply animation
        if (animation !== 'none') {
            output.classList.add(`animation-${animation}`);
        }
    }

    displayPoetryASCII(asciiArt, color, animation, layout, decoration) {
        const output = document.getElementById('ascii-output');
        output.textContent = asciiArt;
        
        // Remove existing classes
        output.className = 'ascii-output';
        
        // Apply layout
        if (layout !== 'centered') {
            output.classList.add(`poetry-layout-${layout}`);
        }
        
        // Apply decoration
        if (decoration !== 'none') {
            output.classList.add(`poetry-decoration-${decoration}`);
        }
        
        // Apply color
        if (color !== 'none') {
            this.applyPoetryColor(output, color);
        }
        
        // Apply animation
        if (animation !== 'none') {
            output.classList.add(`animation-${animation}`);
        }
    }

    applyColor(element, color) {
        const colors = {
            red: '#ff4444',
            green: '#44ff44',
            blue: '#4444ff',
            yellow: '#ffff44',
            purple: '#ff44ff',
            cyan: '#44ffff',
            magenta: '#ff44ff',
            rainbow: 'rainbow'
        };

        if (color === 'rainbow') {
            this.applyRainbowEffect(element);
        } else {
            element.style.color = colors[color] || '#ffffff';
        }
    }

    applyRainbowEffect(element) {
        const text = element.textContent;
        let rainbowText = '';
        const colors = ['#ff0000', '#ff8800', '#ffff00', '#88ff00', '#00ff00', '#00ff88', '#00ffff', '#0088ff', '#0000ff', '#8800ff', '#ff00ff', '#ff0088'];
        
        for (let i = 0; i < text.length; i++) {
            const color = colors[i % colors.length];
            rainbowText += `<span style="color: ${color}">${text[i]}</span>`;
        }
        
        element.innerHTML = rainbowText;
    }

    applyPoetryColor(element, color) {
        const colors = {
            red: '#ff4444',
            green: '#44ff44',
            blue: '#4444ff',
            purple: '#ff44ff',
            gold: '#ffd700',
            silver: '#c0c0c0',
            rainbow: 'rainbow',
            gradient: 'gradient',
            romantic: '#ff69b4',
            mystical: '#9370db'
        };

        if (color === 'rainbow') {
            this.applyRainbowEffect(element);
        } else if (color === 'gradient') {
            this.applyGradientEffect(element);
        } else {
            element.style.color = colors[color] || '#ffffff';
        }
    }

    applyGradientEffect(element) {
        const text = element.textContent;
        let gradientText = '';
        const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];
        
        for (let i = 0; i < text.length; i++) {
            const color = colors[i % colors.length];
            gradientText += `<span style="color: ${color}">${text[i]}</span>`;
        }
        
        element.innerHTML = gradientText;
    }

    async convertPoetryToASCII(poem, font, layout, decoration) {
        const lines = poem.split('\n');
        const selectedFont = this.getFont(font);
        
        let result = '';
        
        // Add decoration at the top if specified
        if (decoration === 'borders') {
            result += this.createBorder('top') + '\n\n';
        } else if (decoration === 'flowers') {
            result += '  üå∏ '.repeat(15) + '\n\n';
        } else if (decoration === 'stars') {
            result += '  ‚ú® '.repeat(15) + '\n\n';
        } else if (decoration === 'hearts') {
            result += '  üíñ '.repeat(15) + '\n\n';
        }
        
        // Process each line of the poem
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (!line.trim()) {
                result += '\n';
                continue;
            }
            
            // Transform line with keywords
            const transformedLine = this.transformLineWithKeywords(line, selectedFont);
            result += transformedLine + '\n';
        }
        
        // Add decoration at the bottom if specified
        if (decoration === 'borders') {
            result += '\n' + this.createBorder('bottom');
        } else if (decoration === 'flowers') {
            result += '\n  üå∏ '.repeat(15);
        } else if (decoration === 'stars') {
            result += '\n  ‚ú® '.repeat(15);
        } else if (decoration === 'hearts') {
            result += '\n  üíñ '.repeat(15);
        }
        
        return result;
    }

    transformLineWithKeywords(line, font) {
        if (this.keywords.size === 0) {
            // No keywords, return normal text
            return '  ' + line;
        }

        // Split line into words while preserving punctuation
        const words = line.split(/(\s+)/);
        let transformedLine = [];
        
        words.forEach(word => {
            if (!word.trim()) {
                transformedLine.push(word);
                return;
            }
            
            // Check if word (without punctuation) is a keyword
            const cleanWord = word.replace(/[^\w]/g, '').toLowerCase();
            const isKeyword = this.keywords.has(cleanWord);
            
            if (isKeyword) {
                // Transform keyword to ASCII
                const asciiWord = this.renderSmallASCII(word.toUpperCase(), font);
                transformedLine.push(asciiWord);
            } else {
                // Keep as normal text with spacing
                transformedLine.push('  ' + word);
            }
        });
        
        return transformedLine.join('');
    }

    renderSmallASCII(word, font) {
        // Create a compact ASCII version for keywords
        const chars = word.split('');
        let result = '';
        
        // Get the height of the font
        const height = font.A ? font.A.length : 3;
        
        for (let row = 0; row < height; row++) {
            for (let char of chars) {
                const upperChar = char.toUpperCase();
                if (font[upperChar] && font[upperChar][row]) {
                    result += font[upperChar][row];
                } else if (char === ' ') {
                    result += ' '.repeat(font.A ? font.A[row].length : 3);
                } else {
                    // For punctuation or unsupported chars, use the char itself
                    result += char + ' ';
                }
            }
            if (row < height - 1) result += '\n';
        }
        
        return result;
    }

    createBorder(type) {
        if (type === 'top') {
            return '‚îå' + '‚îÄ'.repeat(38) + '‚îê';
        } else if (type === 'bottom') {
            return '‚îî' + '‚îÄ'.repeat(38) + '‚îò';
        }
        return '';
    }

    getFont(fontName) {
        const fonts = {
            standard: this.getStandardFont(),
            block: this.getBlockFont(),
            bubble: this.getBubbleFont(),
            lean: this.getLeanFont(),
            mini: this.getMiniFont(),
            script: this.getScriptFont(),
            slant: this.getSlantFont(),
            small: this.getSmallFont(),
            big: this.getBigFont(),
            elegant: this.getElegantFont(),
            romantic: this.getRomanticFont(),
            classic: this.getClassicFont(),
            modern: this.getModernFont(),
            calligraphy: this.getCalligraphyFont(),
            gothic: this.getGothicFont(),
            serif: this.getSerifFont(),
            sans: this.getSansFont(),
            decorative: this.getDecorativeFont(),
            artistic: this.getArtisticFont(),
            '3d': this.get3DFont(),
            star: this.getStarFont(),
            dot: this.getDotFont(),
            wavy: this.getWavyFont(),
            pixel: this.getPixelFont()
        };
        return fonts[fontName] || fonts.standard;
    }

    handleImageUpload(event) {
        try {
            const file = event?.target?.files?.[0];
            if (!file) {
                return;
            }

            // Validate file
            const validation = this.validateImageFile(file);
            if (!validation.valid) {
                this.showNotification(`‚ö†Ô∏è ${validation.error}`);
                event.target.value = ''; // Reset input
                return;
            }

            const reader = new FileReader();
            
            reader.onerror = () => {
                console.error('Error reading file');
                this.showNotification('‚ùå Error reading image file');
                event.target.value = '';
            };
            
            reader.onload = (e) => {
                try {
                    this.currentImage = e.target.result;
                    console.log('Image loaded successfully:', file.name);
                    this.showNotification('‚úÖ Image loaded successfully!');
                } catch (error) {
                    console.error('Error processing image:', error);
                    this.showNotification('‚ùå Error processing image');
                }
            };
            
            reader.readAsDataURL(file);
        } catch (error) {
            console.error('Error handling image upload:', error);
            this.showNotification('‚ùå Error uploading image');
        }
    }

    copyToClipboard() {
        try {
            const outputElement = document.getElementById('ascii-output');
            if (!outputElement) {
                throw new Error('Output element not found');
            }

            const output = outputElement.textContent;
            if (!output || !output.trim()) {
                this.showNotification('‚ö†Ô∏è No ASCII art to copy!');
                return;
            }

            if (!navigator.clipboard) {
                // Fallback for browsers without clipboard API
                const textArea = document.createElement('textarea');
                textArea.value = output;
                textArea.style.position = 'fixed';
                textArea.style.opacity = '0';
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.showNotification('üìã Copied to clipboard!');
                return;
            }

            navigator.clipboard.writeText(output).then(() => {
                this.showNotification('üìã Copied to clipboard!');
            }).catch(err => {
                console.error('Failed to copy: ', err);
                this.showNotification('‚ùå Failed to copy to clipboard');
            });
        } catch (error) {
            console.error('Error copying to clipboard:', error);
            this.showNotification('‚ùå Failed to copy to clipboard');
        }
    }

    downloadASCII() {
        try {
            const outputElement = document.getElementById('ascii-output');
            if (!outputElement) {
                throw new Error('Output element not found');
            }

            const output = outputElement.textContent;
            if (!output || !output.trim()) {
                this.showNotification('‚ö†Ô∏è No ASCII art to download!');
                return;
            }

            const blob = new Blob([output], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ascii-art-${Date.now()}.txt`;
            document.body.appendChild(a);
            a.click();
            
            // Cleanup
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
            
            this.showNotification('üíæ Downloaded successfully!');
        } catch (error) {
            console.error('Error downloading ASCII art:', error);
            this.showNotification('‚ùå Failed to download');
        }
    }

    clearOutput() {
        try {
            const outputElement = document.getElementById('ascii-output');
            if (outputElement) {
                outputElement.textContent = '';
                outputElement.className = 'ascii-output';
                this.showNotification('üóëÔ∏è Output cleared');
            }
        } catch (error) {
            console.error('Error clearing output:', error);
        }
    }

    toggleTheme() {
        try {
            this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
            this.setTheme(this.currentTheme);
            
            try {
                localStorage.setItem('theme', this.currentTheme);
            } catch (storageError) {
                console.warn('Failed to save theme to localStorage:', storageError);
            }
        } catch (error) {
            console.error('Error toggling theme:', error);
        }
    }

    setTheme(theme) {
        try {
            if (!theme || (theme !== 'dark' && theme !== 'light')) {
                theme = 'dark';
            }
            
            this.currentTheme = theme;
            document.documentElement.setAttribute('data-theme', theme);
            
            const themeBtn = document.getElementById('theme-btn');
            if (themeBtn) {
                themeBtn.textContent = theme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
            }
        } catch (error) {
            console.error('Error setting theme:', error);
        }
    }

    initializeAnimatedTitle() {
        try {
            this.animateTitle();
            // Change title every 4 seconds for more dramatic effect
            setInterval(() => {
                try {
                    this.animateTitle();
                } catch (error) {
                    console.error('Error in title animation:', error);
                }
            }, 4000);
        } catch (error) {
            console.error('Error initializing animated title:', error);
        }
    }

    animateTitle() {
        try {
            const titleElement = document.getElementById('ascii-title');
            if (!titleElement) return;

            const text = 'ASCII ART';
            const fontName = this.titleFonts[this.currentTitleIndex];
            const font = this.getFont(fontName);
            
            if (!font) {
                console.warn('Font not found:', fontName);
                return;
            }
            
            const asciiText = this.renderTextWithFont(text, font);
            if (asciiText) {
                titleElement.textContent = asciiText;
            }
            
            this.currentTitleIndex = (this.currentTitleIndex + 1) % this.titleFonts.length;
        } catch (error) {
            console.error('Error animating title:', error);
        }
    }

    addAsciiDecorations() {
        // Add loading indicator
        this.createLoadingIndicator();
        
        // Add corner decorations
        this.addCornerDecorations();
    }

    createLoadingIndicator() {
        const loadingHTML = `
            <div id="loading-indicator" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
                <div style="font-family: 'JetBrains Mono', monospace; color: var(--accent); font-size: 2rem; text-align: center;">
                    <div class="loading-ascii">
                        ‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è
                    </div>
                    <p style="font-size: 1rem; margin-top: 20px;">Generating...</p>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', loadingHTML);
        
        // Add CSS for loading animation
        const style = document.createElement('style');
        style.textContent = `
            .loading-ascii {
                animation: loading-spin 1s steps(10) infinite;
            }
            @keyframes loading-spin {
                0% { content: '‚†ã'; }
                10% { content: '‚†ô'; }
                20% { content: '‚†π'; }
                30% { content: '‚†∏'; }
                40% { content: '‚†º'; }
                50% { content: '‚†¥'; }
                60% { content: '‚†¶'; }
                70% { content: '‚†ß'; }
                80% { content: '‚†á'; }
                90% { content: '‚†è'; }
                100% { content: '‚†ã'; }
            }
        `;
        document.head.appendChild(style);
    }

    addCornerDecorations() {
        const corners = `
            <div class="corner-decorations" style="position: fixed; pointer-events: none; z-index: 1;">
                <div style="position: fixed; top: 10px; left: 10px; font-family: 'JetBrains Mono', monospace; opacity: 0.2; font-size: 0.9rem; background: var(--gradient-main); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                    ‚ï≠‚îÄ
                </div>
                <div style="position: fixed; top: 10px; right: 10px; font-family: 'JetBrains Mono', monospace; opacity: 0.2; font-size: 0.9rem; background: var(--gradient-soft); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                    ‚îÄ‚ïÆ
                </div>
                <div style="position: fixed; bottom: 10px; left: 10px; font-family: 'JetBrains Mono', monospace; opacity: 0.2; font-size: 0.9rem; background: var(--gradient-glow); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                    ‚ï∞‚îÄ
                </div>
                <div style="position: fixed; bottom: 10px; right: 10px; font-family: 'JetBrains Mono', monospace; opacity: 0.2; font-size: 0.9rem; background: var(--gradient-accent); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                    ‚îÄ‚ïØ
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', corners);
    }

    showLoading() {
        const loading = document.getElementById('loading-indicator');
        if (loading) loading.style.display = 'block';
    }

    hideLoading() {
        const loading = document.getElementById('loading-indicator');
        if (loading) loading.style.display = 'none';
    }

    initializeKeywordSystem() {
        try {
            const keywordsInput = document.getElementById('keywords-input');
            const autoDetectBtn = document.getElementById('auto-detect-btn');
            
            if (keywordsInput) {
                keywordsInput.addEventListener('input', (e) => this.handleKeywordInput(e));
                keywordsInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.addKeywordFromInput();
                    }
                });
            }
            
            if (autoDetectBtn) {
                autoDetectBtn.addEventListener('click', () => this.autoDetectKeywords());
            }
        } catch (error) {
            console.error('Error initializing keyword system:', error);
        }
    }

    handleKeywordInput(e) {
        try {
            const value = e?.target?.value;
            if (!value) return;
            
            if (value.includes(',')) {
                const keywords = value.split(',')
                    .map(k => this.sanitizeInput(k.trim()))
                    .filter(k => k && k.length > 0);
                    
                keywords.forEach(keyword => this.addKeyword(keyword));
                e.target.value = '';
            }
        } catch (error) {
            console.error('Error handling keyword input:', error);
        }
    }

    addKeywordFromInput() {
        try {
            const input = document.getElementById('keywords-input');
            if (!input) return;
            
            const keyword = this.sanitizeInput(input.value.trim());
            if (keyword) {
                this.addKeyword(keyword);
                input.value = '';
            }
        } catch (error) {
            console.error('Error adding keyword from input:', error);
        }
    }

    addKeyword(keyword) {
        try {
            if (!keyword || typeof keyword !== 'string') return;
            
            const cleanKeyword = keyword.toLowerCase();
            
            if (this.keywords.has(cleanKeyword)) {
                this.showNotification('‚ö†Ô∏è Keyword already added!');
                return;
            }
            
            if (this.keywords.size >= this.MAX_KEYWORDS) {
                this.showNotification(`‚ö†Ô∏è Maximum ${this.MAX_KEYWORDS} keywords allowed!`);
                return;
            }
            
            this.keywords.add(cleanKeyword);
            this.renderKeywordChips();
        } catch (error) {
            console.error('Error adding keyword:', error);
        }
    }

    removeKeyword(keyword) {
        try {
            if (!keyword) return;
            this.keywords.delete(keyword.toLowerCase());
            this.renderKeywordChips();
        } catch (error) {
            console.error('Error removing keyword:', error);
        }
    }

    renderKeywordChips() {
        try {
            const container = document.getElementById('keyword-chips');
            if (!container) return;
            
            container.innerHTML = '';
            
            this.keywords.forEach(keyword => {
                try {
                    const chip = document.createElement('div');
                    chip.className = 'keyword-chip';
                    
                    const textSpan = document.createElement('span');
                    textSpan.textContent = keyword;
                    
                    const removeSpan = document.createElement('span');
                    removeSpan.className = 'remove';
                    removeSpan.textContent = '√ó';
                    removeSpan.setAttribute('data-keyword', keyword);
                    removeSpan.addEventListener('click', () => {
                        this.removeKeyword(keyword);
                    });
                    
                    chip.appendChild(textSpan);
                    chip.appendChild(removeSpan);
                    container.appendChild(chip);
                } catch (chipError) {
                    console.error('Error creating chip:', chipError);
                }
            });
        } catch (error) {
            console.error('Error rendering keyword chips:', error);
        }
    }

    autoDetectKeywords() {
        try {
            const poemInput = document.getElementById('poem-input');
            if (!poemInput) {
                throw new Error('Poem input element not found');
            }

            const poem = poemInput.value;
            if (!poem || !poem.trim()) {
                this.showNotification('‚ö†Ô∏è Please enter a poem first!');
                return;
            }

            // Common words to exclude
            const commonWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'from', 'as', 'is', 'was', 'are', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'should', 'could', 'may', 'might', 'can', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'them', 'their', 'this', 'that', 'these', 'those', 'your', 'my', 'his', 'her', 'its', 'our', 'their', 'who', 'what', 'where', 'when', 'why', 'how', 'all', 'each', 'every', 'both', 'few', 'more', 'most', 'other', 'some', 'such']);

            // Extract words and find significant ones
            const words = poem.toLowerCase().match(/\b[a-z]+\b/g) || [];
            const wordCount = {};
            
            words.forEach(word => {
                if (!commonWords.has(word) && word.length > 3) {
                    wordCount[word] = (wordCount[word] || 0) + 1;
                }
            });

            // Get top keywords (words that appear more than once or are longer)
            const detectedKeywords = Object.keys(wordCount)
                .filter(word => wordCount[word] > 1 || word.length > 6)
                .slice(0, Math.min(5, this.MAX_KEYWORDS - this.keywords.size));

            if (detectedKeywords.length === 0) {
                this.showNotification('‚ÑπÔ∏è No significant keywords detected. Try adding them manually!');
                return;
            }

            detectedKeywords.forEach(keyword => this.addKeyword(keyword));
            this.showNotification(`‚ú® Detected ${detectedKeywords.length} keywords!`);
        } catch (error) {
            console.error('Error auto-detecting keywords:', error);
            this.showNotification('‚ùå Error detecting keywords');
        }
    }

    // ASCII Font Definitions
    getStandardFont() {
        return {
            A: ['  ‚ñà‚ñà  ', ' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            B: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà '],
            C: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            D: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà '],
            E: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            F: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    '],
            G: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            H: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            I: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            J: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
            K: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            L: ['‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            M: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            N: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            O: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            P: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    '],
            Q: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            R: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            S: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', ' ‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            T: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
            U: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            V: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  '],
            W: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            X: ['‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', ' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà'],
            Y: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
            Z: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '   ‚ñà‚ñà ', '  ‚ñà‚ñà  ', ' ‚ñà‚ñà   ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getBlockFont() {
        return {
            A: ['‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            B: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà '],
            C: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            D: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà '],
            E: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            F: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    '],
            G: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            H: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            I: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            J: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
            K: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            L: ['‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            M: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            N: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            O: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            P: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà    ', '‚ñà‚ñà    ', '‚ñà‚ñà    '],
            Q: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            R: ['‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà ‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            S: [' ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà    ', ' ‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '    ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            T: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
            U: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà‚ñà'],
            V: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  '],
            W: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà'],
            X: ['‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', ' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà  ‚ñà‚ñà'],
            Y: ['‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', ' ‚ñà‚ñà‚ñà‚ñà ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
            Z: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà', '   ‚ñà‚ñà ', '  ‚ñà‚ñà  ', ' ‚ñà‚ñà   ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getBubbleFont() {
        return {
            A: ['  ‚óè‚óè  ', ' ‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            B: ['‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè '],
            C: [' ‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    ', ' ‚óè‚óè‚óè‚óè‚óè'],
            D: ['‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè '],
            E: ['‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè    ', '‚óè‚óè‚óè‚óè  ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè‚óè‚óè‚óè‚óè'],
            F: ['‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè    ', '‚óè‚óè‚óè‚óè  ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    '],
            G: [' ‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè ‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè‚óè'],
            H: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            I: ['‚óè‚óè‚óè‚óè‚óè‚óè', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '‚óè‚óè‚óè‚óè‚óè‚óè'],
            J: ['‚óè‚óè‚óè‚óè‚óè‚óè', '    ‚óè‚óè', '    ‚óè‚óè', '    ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè '],
            K: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè ‚óè‚óè ', '‚óè‚óè‚óè‚óè  ', '‚óè‚óè ‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            L: ['‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè‚óè‚óè‚óè‚óè'],
            M: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè ‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            N: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè ‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            O: [' ‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè‚óè'],
            P: ['‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè    ', '‚óè‚óè    ', '‚óè‚óè    '],
            Q: [' ‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè ‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè‚óè'],
            R: ['‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè ', '‚óè‚óè ‚óè‚óè ', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            S: [' ‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè    ', ' ‚óè‚óè‚óè‚óè‚óè', '    ‚óè‚óè', '    ‚óè‚óè', ' ‚óè‚óè‚óè‚óè‚óè'],
            T: ['‚óè‚óè‚óè‚óè‚óè‚óè', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  '],
            U: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè‚óè'],
            V: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè ', ' ‚óè‚óè‚óè‚óè ', '  ‚óè‚óè  '],
            W: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè ‚óè‚óè‚óè', '‚óè‚óè‚óè‚óè‚óè‚óè', '‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè'],
            X: ['‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', ' ‚óè‚óè‚óè‚óè ', '‚óè‚óè  ‚óè‚óè'],
            Y: ['‚óè‚óè  ‚óè‚óè', '‚óè‚óè  ‚óè‚óè', ' ‚óè‚óè‚óè‚óè ', '  ‚óè‚óè  ', '  ‚óè‚óè  ', '  ‚óè‚óè  '],
            Z: ['‚óè‚óè‚óè‚óè‚óè‚óè', '    ‚óè‚óè', '   ‚óè‚óè ', '  ‚óè‚óè  ', ' ‚óè‚óè   ', '‚óè‚óè‚óè‚óè‚óè‚óè'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getLeanFont() {
        return {
            A: ['  /\\  ', ' /  \\ ', '/____\\', '/    \\', '/    \\', '/    \\'],
            B: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|____/'],
            C: [' /\\   ', '/  \\  ', '|    ', '|    ', '\\  / ', ' \\/  '],
            D: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|____/'],
            E: ['|____ ', '|     ', '|____ ', '|     ', '|     ', '|____ '],
            F: ['|____ ', '|     ', '|____ ', '|     ', '|     ', '|     '],
            G: [' /\\   ', '/  \\  ', '|    ', '|  /\\ ', '\\  / ', ' \\/  '],
            H: ['|    |', '|    |', '|____|', '|    |', '|    |', '|    |'],
            I: ['|____|', '  |  ', '  |  ', '  |  ', '  |  ', '|____|'],
            J: ['|____|', '    |', '    |', '    |', '|  |', ' \\/ '],
            K: ['|   / ', '|  /  ', '| /   ', '|/    ', '| \\   ', '|  \\  '],
            L: ['|     ', '|     ', '|     ', '|     ', '|     ', '|____ '],
            M: ['|\\  /|', '| \\/ |', '|    |', '|    |', '|    |', '|    |'],
            N: ['|\\   |', '| \\  |', '|  \\ |', '|   \\|', '|    |', '|    |'],
            O: [' /\\   ', '/  \\  ', '|    |', '|    |', '\\  / ', ' \\/  '],
            P: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    ', '|     '],
            Q: [' /\\   ', '/  \\  ', '|    |', '|  \\ |', '\\  \\|', ' \\/\\ '],
            R: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|     '],
            S: [' /\\   ', '/  \\  ', ' \\   ', '  \\  ', '  /  ', ' \\/  '],
            T: ['|____|', '  |  ', '  |  ', '  |  ', '  |  ', '  |  '],
            U: ['|    |', '|    |', '|    |', '|    |', '\\  / ', ' \\/  '],
            V: ['|    |', '|    |', '|    |', ' \\  / ', '  \\/  ', '  /\\  '],
            W: ['|    |', '|    |', '| /\\ |', '|/  \\|', '|    |', '|    |'],
            X: ['|    |', ' \\  / ', '  \\/  ', '  /\\  ', ' /  \\ ', '|    |'],
            Y: ['|    |', '|    |', ' \\  / ', '  \\/  ', '  /\\  ', '  /\\  '],
            Z: ['|____|', '    / ', '   /  ', '  /   ', ' /    ', '|____|'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getMiniFont() {
        return {
            A: [' ‚ñÑ ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            B: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ‚ñÄ‚ñÄ'],
            C: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ  ', '‚ñÄ‚ñÄ‚ñÄ'],
            D: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            E: ['‚ñÑ‚ñÄ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ‚ñÄ‚ñÄ'],
            F: ['‚ñÑ‚ñÄ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ  '],
            G: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            H: ['‚ñÑ ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            I: ['‚ñÑ‚ñÄ‚ñÑ', ' ‚ñÄ ', '‚ñÑ‚ñÄ‚ñÑ'],
            J: ['  ‚ñÑ', '  ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            K: ['‚ñÑ ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ ‚ñÄ'],
            L: ['‚ñÑ  ', '‚ñÑ  ', '‚ñÄ‚ñÄ‚ñÄ'],
            M: ['‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ', '‚ñÄ ‚ñÄ'],
            N: ['‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ ‚ñÄ'],
            O: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            P: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ ', '‚ñÄ  '],
            Q: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            R: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            S: ['‚ñÑ‚ñÄ‚ñÄ', ' ‚ñÄ‚ñÑ', '‚ñÄ‚ñÄ‚ñÄ'],
            T: ['‚ñÑ‚ñÄ‚ñÑ', ' ‚ñÄ ', ' ‚ñÄ '],
            U: ['‚ñÑ ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            V: ['‚ñÑ ‚ñÑ', '‚ñÑ ‚ñÄ', ' ‚ñÄ '],
            W: ['‚ñÑ ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ', '‚ñÄ ‚ñÄ'],
            X: ['‚ñÑ ‚ñÑ', ' ‚ñÄ ', '‚ñÑ ‚ñÑ'],
            Y: ['‚ñÑ ‚ñÑ', ' ‚ñÄ ', ' ‚ñÄ '],
            Z: ['‚ñÑ‚ñÄ‚ñÄ', ' ‚ñÄ ', '‚ñÄ‚ñÄ‚ñÄ'],
            ' ': ['   ', '   ', '   ']
        };
    }

    getScriptFont() {
        return {
            A: ['  ‚ï≠‚îÄ‚ïÆ  ', ' ‚ï±   ‚ï≤ ', '‚ï±     ‚ï≤', '‚ï≤     ‚ï±', ' ‚ï≤   ‚ï± ', '  ‚ï∞‚îÄ‚ïØ  '],
            B: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            C: [' ‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ', '‚ï±     ', '‚îÇ     ', '‚îÇ     ', '‚ï≤     ', ' ‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ'],
            D: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            E: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ     ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ     ', '‚îÇ     ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            F: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ     ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ     ', '‚îÇ     ', '‚îÇ     '],
            G: [' ‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ', '‚ï±     ', '‚îÇ  ‚ï≠‚îÄ‚ïÆ', '‚îÇ  ‚îÇ ‚îÇ', '‚ï≤  ‚ï∞‚îÄ‚ïØ', ' ‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ'],
            H: ['‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ'],
            I: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '  ‚îÇ  ', '  ‚îÇ  ', '  ‚îÇ  ', '  ‚îÇ  ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            J: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '    ‚îÇ', '    ‚îÇ', '    ‚îÇ', '‚îÇ  ‚îÇ', '‚ï∞‚îÄ‚îÄ‚ïØ '],
            K: ['‚îÇ  ‚ï± ', '‚îÇ ‚ï±  ', '‚îÇ‚ï±   ', '‚îÇ‚ï≤   ', '‚îÇ ‚ï≤  ', '‚îÇ  ‚ï≤ '],
            L: ['‚îÇ     ', '‚îÇ     ', '‚îÇ     ', '‚îÇ     ', '‚îÇ     ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            M: ['‚îÇ‚ï≤  ‚ï±‚îÇ', '‚îÇ ‚ï≤‚ï± ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ'],
            N: ['‚îÇ‚ï≤   ‚îÇ', '‚îÇ ‚ï≤  ‚îÇ', '‚îÇ  ‚ï≤ ‚îÇ', '‚îÇ   ‚ï≤‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ'],
            O: [' ‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ', '‚ï±     ‚ï≤', '‚îÇ     ‚îÇ', '‚îÇ     ‚îÇ', '‚ï≤     ‚ï±', ' ‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ'],
            P: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ', '‚îÇ     ', '‚îÇ     ', '‚îÇ     '],
            Q: [' ‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ', '‚ï±     ‚ï≤', '‚îÇ     ‚îÇ', '‚îÇ  ‚ï≤  ‚îÇ', '‚ï≤  ‚ï≤  ‚ï±', ' ‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ'],
            R: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '‚îÇ    ‚îÇ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ', '‚îÇ  ‚ï≤  ', '‚îÇ   ‚ï≤ ', '‚îÇ    ‚ï≤'],
            S: [' ‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ', '‚ï±     ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '     ‚îÇ', '     ‚ï±', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            T: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '  ‚îÇ  ', '  ‚îÇ  ', '  ‚îÇ  ', '  ‚îÇ  ', '  ‚îÇ  '],
            U: ['‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚ï≤    ‚ï±', ' ‚ï∞‚îÄ‚îÄ‚ïØ '],
            V: ['‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚ï≤    ‚ï±', ' ‚ï≤  ‚ï± ', '  ‚ï≤‚ï±  '],
            W: ['‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ ‚ï≤‚ï± ‚îÇ', '‚îÇ‚ï±  ‚ï≤‚îÇ', '‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ'],
            X: ['‚îÇ    ‚îÇ', ' ‚ï≤  ‚ï± ', '  ‚ï≤‚ï±  ', '  ‚ï±‚ï≤  ', ' ‚ï±  ‚ï≤ ', '‚îÇ    ‚îÇ'],
            Y: ['‚îÇ    ‚îÇ', '‚îÇ    ‚îÇ', ' ‚ï≤  ‚ï± ', '  ‚ï≤‚ï±  ', '  ‚ï±‚ï≤  ', '  ‚ï±‚ï≤  '],
            Z: ['‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ', '    ‚ï±', '   ‚ï± ', '  ‚ï±  ', ' ‚ï±   ', '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getSlantFont() {
        return {
            A: ['  /\\  ', ' /  \\ ', '/____\\', '/    \\', '/    \\', '/    \\'],
            B: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|____/'],
            C: [' /\\   ', '/  \\  ', '|    ', '|    ', '\\  / ', ' \\/  '],
            D: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|____/'],
            E: ['|____ ', '|     ', '|____ ', '|     ', '|     ', '|____ '],
            F: ['|____ ', '|     ', '|____ ', '|     ', '|     ', '|     '],
            G: [' /\\   ', '/  \\  ', '|    ', '|  /\\ ', '\\  / ', ' \\/  '],
            H: ['|    |', '|    |', '|____|', '|    |', '|    |', '|    |'],
            I: ['|____|', '  |  ', '  |  ', '  |  ', '  |  ', '|____|'],
            J: ['|____|', '    |', '    |', '    |', '|  |', ' \\/ '],
            K: ['|   / ', '|  /  ', '| /   ', '|/    ', '| \\   ', '|  \\  '],
            L: ['|     ', '|     ', '|     ', '|     ', '|     ', '|____ '],
            M: ['|\\  /|', '| \\/ |', '|    |', '|    |', '|    |', '|    |'],
            N: ['|\\   |', '| \\  |', '|  \\ |', '|   \\|', '|    |', '|    |'],
            O: [' /\\   ', '/  \\  ', '|    |', '|    |', '\\  / ', ' \\/  '],
            P: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    ', '|     '],
            Q: [' /\\   ', '/  \\  ', '|    |', '|  \\ |', '\\  \\|', ' \\/\\ '],
            R: ['|\\    ', '| \\   ', '|  \\  ', '|   \\ ', '|    \\', '|     '],
            S: [' /\\   ', '/  \\  ', ' \\   ', '  \\  ', '  /  ', ' \\/  '],
            T: ['|____|', '  |  ', '  |  ', '  |  ', '  |  ', '  |  '],
            U: ['|    |', '|    |', '|    |', '|    |', '\\  / ', ' \\/  '],
            V: ['|    |', '|    |', '|    |', ' \\  / ', '  \\/  ', '  /\\  '],
            W: ['|    |', '|    |', '| /\\ |', '|/  \\|', '|    |', '|    |'],
            X: ['|    |', ' \\  / ', '  \\/  ', '  /\\  ', ' /  \\ ', '|    |'],
            Y: ['|    |', '|    |', ' \\  / ', '  \\/  ', '  /\\  ', '  /\\  '],
            Z: ['|____|', '    / ', '   /  ', '  /   ', ' /    ', '|____|'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getSmallFont() {
        return {
            A: [' ‚ñÑ ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            B: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ‚ñÄ‚ñÄ'],
            C: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ  ', '‚ñÄ‚ñÄ‚ñÄ'],
            D: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            E: ['‚ñÑ‚ñÄ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ‚ñÄ‚ñÄ'],
            F: ['‚ñÑ‚ñÄ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ  '],
            G: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            H: ['‚ñÑ ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            I: ['‚ñÑ‚ñÄ‚ñÑ', ' ‚ñÄ ', '‚ñÑ‚ñÄ‚ñÑ'],
            J: ['  ‚ñÑ', '  ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            K: ['‚ñÑ ‚ñÄ', '‚ñÑ‚ñÄ ', '‚ñÄ ‚ñÄ'],
            L: ['‚ñÑ  ', '‚ñÑ  ', '‚ñÄ‚ñÄ‚ñÄ'],
            M: ['‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ', '‚ñÄ ‚ñÄ'],
            N: ['‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ ‚ñÄ'],
            O: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            P: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ ', '‚ñÄ  '],
            Q: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            R: ['‚ñÑ‚ñÄ‚ñÑ', '‚ñÑ‚ñÄ‚ñÑ', '‚ñÄ ‚ñÄ'],
            S: ['‚ñÑ‚ñÄ‚ñÄ', ' ‚ñÄ‚ñÑ', '‚ñÄ‚ñÄ‚ñÄ'],
            T: ['‚ñÑ‚ñÄ‚ñÑ', ' ‚ñÄ ', ' ‚ñÄ '],
            U: ['‚ñÑ ‚ñÑ', '‚ñÑ ‚ñÄ', '‚ñÄ‚ñÄ‚ñÄ'],
            V: ['‚ñÑ ‚ñÑ', '‚ñÑ ‚ñÄ', ' ‚ñÄ '],
            W: ['‚ñÑ ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ', '‚ñÄ ‚ñÄ'],
            X: ['‚ñÑ ‚ñÑ', ' ‚ñÄ ', '‚ñÑ ‚ñÑ'],
            Y: ['‚ñÑ ‚ñÑ', ' ‚ñÄ ', ' ‚ñÄ '],
            Z: ['‚ñÑ‚ñÄ‚ñÄ', ' ‚ñÄ ', '‚ñÄ‚ñÄ‚ñÄ'],
            ' ': ['   ', '   ', '   ']
        };
    }

    getBigFont() {
        return {
            A: ['    ‚ñà‚ñà    ', '   ‚ñà‚ñà‚ñà‚ñà   ', '  ‚ñà‚ñà  ‚ñà‚ñà  ', ' ‚ñà‚ñà    ‚ñà‚ñà ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà'],
            B: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  '],
            C: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà       ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            D: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  '],
            E: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            F: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        '],
            G: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà        ', '‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            H: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà'],
            I: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            J: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà‚ñà', '        ‚ñà‚ñà', '        ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            K: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà    ‚ñà‚ñà  ', '‚ñà‚ñà  ‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà      ', '‚ñà‚ñà  ‚ñà‚ñà    ', '‚ñà‚ñà    ‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà'],
            L: ['‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            M: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà', '‚ñà‚ñà        ‚ñà‚ñà', '‚ñà‚ñà        ‚ñà‚ñà'],
            N: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà     ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà', '‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà'],
            O: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            P: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà        ', '‚ñà‚ñà        ', '‚ñà‚ñà        '],
            Q: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            R: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ', '‚ñà‚ñà    ‚ñà‚ñà  ', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà'],
            S: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà‚ñà       ‚ñà‚ñà', '‚ñà‚ñà        ', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '        ‚ñà‚ñà', '‚ñà‚ñà       ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            T: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    '],
            U: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            V: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', ' ‚ñà‚ñà    ‚ñà‚ñà ', '  ‚ñà‚ñà  ‚ñà‚ñà  ', '   ‚ñà‚ñà‚ñà‚ñà   ', '    ‚ñà‚ñà    '],
            W: ['‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà', '‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà', '‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà', '‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà', '‚ñà‚ñà      ‚ñà‚ñà'],
            X: ['‚ñà‚ñà      ‚ñà‚ñà', ' ‚ñà‚ñà    ‚ñà‚ñà ', '  ‚ñà‚ñà  ‚ñà‚ñà  ', '   ‚ñà‚ñà‚ñà‚ñà   ', '  ‚ñà‚ñà  ‚ñà‚ñà  ', ' ‚ñà‚ñà    ‚ñà‚ñà ', '‚ñà‚ñà      ‚ñà‚ñà'],
            Y: ['‚ñà‚ñà      ‚ñà‚ñà', ' ‚ñà‚ñà    ‚ñà‚ñà ', '  ‚ñà‚ñà  ‚ñà‚ñà  ', '   ‚ñà‚ñà‚ñà‚ñà   ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    ', '    ‚ñà‚ñà    '],
            Z: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà‚ñà', '       ‚ñà‚ñà ', '      ‚ñà‚ñà  ', '     ‚ñà‚ñà   ', '    ‚ñà‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            ' ': ['          ', '          ', '          ', '          ', '          ', '          ', '          ']
        };
    }

    // New Poetry Fonts
    getElegantFont() {
        return {
            A: ['    ‚ô†    ', '   ‚ô†‚ô†‚ô†   ', '  ‚ô†   ‚ô†  ', ' ‚ô†     ‚ô† ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†'],
            B: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† '],
            C: ['  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†        ', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            D: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† '],
            E: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†        ', '‚ô†        ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†        ', '‚ô†        ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            F: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†        ', '‚ô†        ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†        ', '‚ô†        ', '‚ô†        '],
            G: ['  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†        ', '‚ô†        ', '‚ô†   ‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            H: ['‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†'],
            I: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            J: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '        ‚ô†', '        ‚ô†', '        ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            K: ['‚ô†      ‚ô†', '‚ô†     ‚ô† ', '‚ô†    ‚ô†  ', '‚ô†   ‚ô†   ', '‚ô†  ‚ô†    ', '‚ô† ‚ô†     ', '‚ô†‚ô†      '],
            L: ['‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†        ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            M: ['‚ô†       ‚ô†', '‚ô†‚ô†     ‚ô†‚ô†', '‚ô† ‚ô†   ‚ô† ‚ô†', '‚ô†  ‚ô† ‚ô†  ‚ô†', '‚ô†   ‚ô†   ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†'],
            N: ['‚ô†       ‚ô†', '‚ô†‚ô†      ‚ô†', '‚ô† ‚ô†     ‚ô†', '‚ô†  ‚ô†    ‚ô†', '‚ô†   ‚ô†   ‚ô†', '‚ô†    ‚ô†  ‚ô†', '‚ô†     ‚ô†‚ô†‚ô†'],
            O: ['  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            P: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†        ', '‚ô†        ', '‚ô†        '],
            Q: ['  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†    ‚ô†  ‚ô†', '‚ô†     ‚ô† ‚ô†', '‚ô†      ‚ô†‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            R: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô† ', '‚ô†  ‚ô†     ', '‚ô†   ‚ô†    ', '‚ô†    ‚ô†   '],
            S: ['  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '‚ô†        ', '‚ô†        ', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '        ‚ô†', '        ‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            T: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    '],
            U: ['‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†       ‚ô†', '  ‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            V: ['‚ô†       ‚ô†', '‚ô†       ‚ô†', ' ‚ô†     ‚ô† ', '  ‚ô†   ‚ô†  ', '   ‚ô† ‚ô†   ', '    ‚ô†    ', '    ‚ô†    '],
            W: ['‚ô†       ‚ô†', '‚ô†       ‚ô†', '‚ô†   ‚ô†   ‚ô†', '‚ô†  ‚ô† ‚ô†  ‚ô†', '‚ô† ‚ô†   ‚ô† ‚ô†', '‚ô†‚ô†     ‚ô†‚ô†', '‚ô†       ‚ô†'],
            X: ['‚ô†       ‚ô†', ' ‚ô†     ‚ô† ', '  ‚ô†   ‚ô†  ', '   ‚ô† ‚ô†   ', '  ‚ô†   ‚ô†  ', ' ‚ô†     ‚ô† ', '‚ô†       ‚ô†'],
            Y: ['‚ô†       ‚ô†', ' ‚ô†     ‚ô† ', '  ‚ô†   ‚ô†  ', '   ‚ô† ‚ô†   ', '    ‚ô†    ', '    ‚ô†    ', '    ‚ô†    '],
            Z: ['‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†', '       ‚ô† ', '      ‚ô†  ', '     ‚ô†   ', '    ‚ô†    ', '   ‚ô†     ', '‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getRomanticFont() {
        return {
            A: ['    ‚ô•    ', '   ‚ô•‚ô•‚ô•   ', '  ‚ô•   ‚ô•  ', ' ‚ô•     ‚ô• ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•'],
            B: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• '],
            C: ['  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•        ', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            D: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• '],
            E: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•        ', '‚ô•        ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•        ', '‚ô•        ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            F: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•        ', '‚ô•        ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•        ', '‚ô•        ', '‚ô•        '],
            G: ['  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•        ', '‚ô•        ', '‚ô•   ‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            H: ['‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•'],
            I: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            J: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '        ‚ô•', '        ‚ô•', '        ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            K: ['‚ô•      ‚ô•', '‚ô•     ‚ô• ', '‚ô•    ‚ô•  ', '‚ô•   ‚ô•   ', '‚ô•  ‚ô•    ', '‚ô• ‚ô•     ', '‚ô•‚ô•      '],
            L: ['‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•        ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            M: ['‚ô•       ‚ô•', '‚ô•‚ô•     ‚ô•‚ô•', '‚ô• ‚ô•   ‚ô• ‚ô•', '‚ô•  ‚ô• ‚ô•  ‚ô•', '‚ô•   ‚ô•   ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•'],
            N: ['‚ô•       ‚ô•', '‚ô•‚ô•      ‚ô•', '‚ô• ‚ô•     ‚ô•', '‚ô•  ‚ô•    ‚ô•', '‚ô•   ‚ô•   ‚ô•', '‚ô•    ‚ô•  ‚ô•', '‚ô•     ‚ô•‚ô•‚ô•'],
            O: ['  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            P: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•        ', '‚ô•        ', '‚ô•        '],
            Q: ['  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•    ‚ô•  ‚ô•', '‚ô•     ‚ô• ‚ô•', '‚ô•      ‚ô•‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            R: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô• ', '‚ô•  ‚ô•     ', '‚ô•   ‚ô•    ', '‚ô•    ‚ô•   '],
            S: ['  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '‚ô•        ', '‚ô•        ', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '        ‚ô•', '        ‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            T: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    '],
            U: ['‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•       ‚ô•', '  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            V: ['‚ô•       ‚ô•', '‚ô•       ‚ô•', ' ‚ô•     ‚ô• ', '  ‚ô•   ‚ô•  ', '   ‚ô• ‚ô•   ', '    ‚ô•    ', '    ‚ô•    '],
            W: ['‚ô•       ‚ô•', '‚ô•       ‚ô•', '‚ô•   ‚ô•   ‚ô•', '‚ô•  ‚ô• ‚ô•  ‚ô•', '‚ô• ‚ô•   ‚ô• ‚ô•', '‚ô•‚ô•     ‚ô•‚ô•', '‚ô•       ‚ô•'],
            X: ['‚ô•       ‚ô•', ' ‚ô•     ‚ô• ', '  ‚ô•   ‚ô•  ', '   ‚ô• ‚ô•   ', '  ‚ô•   ‚ô•  ', ' ‚ô•     ‚ô• ', '‚ô•       ‚ô•'],
            Y: ['‚ô•       ‚ô•', ' ‚ô•     ‚ô• ', '  ‚ô•   ‚ô•  ', '   ‚ô• ‚ô•   ', '    ‚ô•    ', '    ‚ô•    ', '    ‚ô•    '],
            Z: ['‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•', '       ‚ô• ', '      ‚ô•  ', '     ‚ô•   ', '    ‚ô•    ', '   ‚ô•     ', '‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getClassicFont() {
        return {
            A: ['    ‚ñà    ', '   ‚ñà‚ñà‚ñà   ', '  ‚ñà   ‚ñà  ', ' ‚ñà     ‚ñà ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            B: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            C: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            D: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            E: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            F: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà        '],
            G: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            H: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            I: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            J: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà', '        ‚ñà', '        ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            K: ['‚ñà      ‚ñà', '‚ñà     ‚ñà ', '‚ñà    ‚ñà  ', '‚ñà   ‚ñà   ', '‚ñà  ‚ñà    ', '‚ñà ‚ñà     ', '‚ñà‚ñà      '],
            L: ['‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            M: ['‚ñà       ‚ñà', '‚ñà‚ñà     ‚ñà‚ñà', '‚ñà ‚ñà   ‚ñà ‚ñà', '‚ñà  ‚ñà ‚ñà  ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            N: ['‚ñà       ‚ñà', '‚ñà‚ñà      ‚ñà', '‚ñà ‚ñà     ‚ñà', '‚ñà  ‚ñà    ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà    ‚ñà  ‚ñà', '‚ñà     ‚ñà‚ñà‚ñà'],
            O: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            P: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà        '],
            Q: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà    ‚ñà  ‚ñà', '‚ñà     ‚ñà ‚ñà', '‚ñà      ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            R: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà  ‚ñà     ', '‚ñà   ‚ñà    ', '‚ñà    ‚ñà   '],
            S: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà', '        ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            T: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    '],
            U: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            V: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '    ‚ñà    ', '    ‚ñà    '],
            W: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà  ‚ñà ‚ñà  ‚ñà', '‚ñà ‚ñà   ‚ñà ‚ñà', '‚ñà‚ñà     ‚ñà‚ñà', '‚ñà       ‚ñà'],
            X: ['‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '  ‚ñà   ‚ñà  ', ' ‚ñà     ‚ñà ', '‚ñà       ‚ñà'],
            Y: ['‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    '],
            Z: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '       ‚ñà ', '      ‚ñà  ', '     ‚ñà   ', '    ‚ñà    ', '   ‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getModernFont() {
        return {
            A: ['    ‚ñ≤    ', '   ‚ñ≤‚ñ≤‚ñ≤   ', '  ‚ñ≤   ‚ñ≤  ', ' ‚ñ≤     ‚ñ≤ ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤'],
            B: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ '],
            C: ['  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            D: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ '],
            E: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            F: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        '],
            G: ['  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤   ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            H: ['‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤'],
            I: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            J: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '        ‚ñ≤', '        ‚ñ≤', '        ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            K: ['‚ñ≤      ‚ñ≤', '‚ñ≤     ‚ñ≤ ', '‚ñ≤    ‚ñ≤  ', '‚ñ≤   ‚ñ≤   ', '‚ñ≤  ‚ñ≤    ', '‚ñ≤ ‚ñ≤     ', '‚ñ≤‚ñ≤      '],
            L: ['‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            M: ['‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤     ‚ñ≤‚ñ≤', '‚ñ≤ ‚ñ≤   ‚ñ≤ ‚ñ≤', '‚ñ≤  ‚ñ≤ ‚ñ≤  ‚ñ≤', '‚ñ≤   ‚ñ≤   ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤'],
            N: ['‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤      ‚ñ≤', '‚ñ≤ ‚ñ≤     ‚ñ≤', '‚ñ≤  ‚ñ≤    ‚ñ≤', '‚ñ≤   ‚ñ≤   ‚ñ≤', '‚ñ≤    ‚ñ≤  ‚ñ≤', '‚ñ≤     ‚ñ≤‚ñ≤‚ñ≤'],
            O: ['  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            P: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤        ', '‚ñ≤        ', '‚ñ≤        '],
            Q: ['  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤    ‚ñ≤  ‚ñ≤', '‚ñ≤     ‚ñ≤ ‚ñ≤', '‚ñ≤      ‚ñ≤‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            R: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤ ', '‚ñ≤  ‚ñ≤     ', '‚ñ≤   ‚ñ≤    ', '‚ñ≤    ‚ñ≤   '],
            S: ['  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '‚ñ≤        ', '‚ñ≤        ', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '        ‚ñ≤', '        ‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            T: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    '],
            U: ['‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            V: ['‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', ' ‚ñ≤     ‚ñ≤ ', '  ‚ñ≤   ‚ñ≤  ', '   ‚ñ≤ ‚ñ≤   ', '    ‚ñ≤    ', '    ‚ñ≤    '],
            W: ['‚ñ≤       ‚ñ≤', '‚ñ≤       ‚ñ≤', '‚ñ≤   ‚ñ≤   ‚ñ≤', '‚ñ≤  ‚ñ≤ ‚ñ≤  ‚ñ≤', '‚ñ≤ ‚ñ≤   ‚ñ≤ ‚ñ≤', '‚ñ≤‚ñ≤     ‚ñ≤‚ñ≤', '‚ñ≤       ‚ñ≤'],
            X: ['‚ñ≤       ‚ñ≤', ' ‚ñ≤     ‚ñ≤ ', '  ‚ñ≤   ‚ñ≤  ', '   ‚ñ≤ ‚ñ≤   ', '  ‚ñ≤   ‚ñ≤  ', ' ‚ñ≤     ‚ñ≤ ', '‚ñ≤       ‚ñ≤'],
            Y: ['‚ñ≤       ‚ñ≤', ' ‚ñ≤     ‚ñ≤ ', '  ‚ñ≤   ‚ñ≤  ', '   ‚ñ≤ ‚ñ≤   ', '    ‚ñ≤    ', '    ‚ñ≤    ', '    ‚ñ≤    '],
            Z: ['‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤', '       ‚ñ≤ ', '      ‚ñ≤  ', '     ‚ñ≤   ', '    ‚ñ≤    ', '   ‚ñ≤     ', '‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getCalligraphyFont() {
        return {
            A: ['    ‚ïî    ', '   ‚ïî‚ïó‚ïî   ', '  ‚ïî   ‚ïó  ', ' ‚ïî     ‚ïó ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó'],
            B: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó '],
            C: ['  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî        ', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            D: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó '],
            E: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî        ', '‚ïî        ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî        ', '‚ïî        ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            F: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî        ', '‚ïî        ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî        ', '‚ïî        ', '‚ïî        '],
            G: ['  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî        ', '‚ïî        ', '‚ïî   ‚ïî‚ïó‚ïó‚ïó‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            H: ['‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó'],
            I: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            J: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '        ‚ïó', '        ‚ïó', '        ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            K: ['‚ïî      ‚ïó', '‚ïî     ‚ïó ', '‚ïî    ‚ïó  ', '‚ïî   ‚ïó   ', '‚ïî  ‚ïó    ', '‚ïî ‚ïó     ', '‚ïî‚ïó      '],
            L: ['‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî        ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            M: ['‚ïî       ‚ïó', '‚ïî‚ïó     ‚ïî‚ïó', '‚ïî ‚ïó   ‚ïó ‚ïó', '‚ïî  ‚ïó ‚ïó  ‚ïó', '‚ïî   ‚ïó   ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó'],
            N: ['‚ïî       ‚ïó', '‚ïî‚ïó      ‚ïó', '‚ïî ‚ïó     ‚ïó', '‚ïî  ‚ïó    ‚ïó', '‚ïî   ‚ïó   ‚ïó', '‚ïî    ‚ïó  ‚ïó', '‚ïî     ‚ïó‚ïó‚ïó'],
            O: ['  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            P: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî        ', '‚ïî        ', '‚ïî        '],
            Q: ['  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî    ‚ïó  ‚ïó', '‚ïî     ‚ïó ‚ïó', '‚ïî      ‚ïó‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            R: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó ', '‚ïî  ‚ïó     ', '‚ïî   ‚ïó    ', '‚ïî    ‚ïó   '],
            S: ['  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '‚ïî        ', '‚ïî        ', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '        ‚ïó', '        ‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            T: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    '],
            U: ['‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî       ‚ïó', '  ‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            V: ['‚ïî       ‚ïó', '‚ïî       ‚ïó', ' ‚ïî     ‚ïó ', '  ‚ïî   ‚ïó  ', '   ‚ïî ‚ïó   ', '    ‚ïî    ', '    ‚ïî    '],
            W: ['‚ïî       ‚ïó', '‚ïî       ‚ïó', '‚ïî   ‚ïî   ‚ïó', '‚ïî  ‚ïî ‚ïó  ‚ïó', '‚ïî ‚ïî   ‚ïó ‚ïó', '‚ïî‚ïó     ‚ïî‚ïó', '‚ïî       ‚ïó'],
            X: ['‚ïî       ‚ïó', ' ‚ïî     ‚ïó ', '  ‚ïî   ‚ïó  ', '   ‚ïî ‚ïó   ', '  ‚ïî   ‚ïó  ', ' ‚ïî     ‚ïó ', '‚ïî       ‚ïó'],
            Y: ['‚ïî       ‚ïó', ' ‚ïî     ‚ïó ', '  ‚ïî   ‚ïó  ', '   ‚ïî ‚ïó   ', '    ‚ïî    ', '    ‚ïî    ', '    ‚ïî    '],
            Z: ['‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó', '       ‚ïó ', '      ‚ïó  ', '     ‚ïó   ', '    ‚ïó    ', '   ‚ïó     ', '‚ïî‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó‚ïó'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getGothicFont() {
        return {
            A: ['    ‚ñë    ', '   ‚ñë‚ñë‚ñë   ', '  ‚ñë   ‚ñë  ', ' ‚ñë     ‚ñë ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë'],
            B: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë '],
            C: ['  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë        ', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            D: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë '],
            E: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë        ', '‚ñë        ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë        ', '‚ñë        ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            F: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë        ', '‚ñë        ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë        ', '‚ñë        ', '‚ñë        '],
            G: ['  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë        ', '‚ñë        ', '‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            H: ['‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë'],
            I: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            J: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '        ‚ñë', '        ‚ñë', '        ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            K: ['‚ñë      ‚ñë', '‚ñë     ‚ñë ', '‚ñë    ‚ñë  ', '‚ñë   ‚ñë   ', '‚ñë  ‚ñë    ', '‚ñë ‚ñë     ', '‚ñë‚ñë      '],
            L: ['‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë        ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            M: ['‚ñë       ‚ñë', '‚ñë‚ñë     ‚ñë‚ñë', '‚ñë ‚ñë   ‚ñë ‚ñë', '‚ñë  ‚ñë ‚ñë  ‚ñë', '‚ñë   ‚ñë   ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë'],
            N: ['‚ñë       ‚ñë', '‚ñë‚ñë      ‚ñë', '‚ñë ‚ñë     ‚ñë', '‚ñë  ‚ñë    ‚ñë', '‚ñë   ‚ñë   ‚ñë', '‚ñë    ‚ñë  ‚ñë', '‚ñë     ‚ñë‚ñë‚ñë'],
            O: ['  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            P: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë        ', '‚ñë        ', '‚ñë        '],
            Q: ['  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë    ‚ñë  ‚ñë', '‚ñë     ‚ñë ‚ñë', '‚ñë      ‚ñë‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            R: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ', '‚ñë  ‚ñë     ', '‚ñë   ‚ñë    ', '‚ñë    ‚ñë   '],
            S: ['  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '‚ñë        ', '‚ñë        ', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '        ‚ñë', '        ‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            T: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    '],
            U: ['‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë       ‚ñë', '  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            V: ['‚ñë       ‚ñë', '‚ñë       ‚ñë', ' ‚ñë     ‚ñë ', '  ‚ñë   ‚ñë  ', '   ‚ñë ‚ñë   ', '    ‚ñë    ', '    ‚ñë    '],
            W: ['‚ñë       ‚ñë', '‚ñë       ‚ñë', '‚ñë   ‚ñë   ‚ñë', '‚ñë  ‚ñë ‚ñë  ‚ñë', '‚ñë ‚ñë   ‚ñë ‚ñë', '‚ñë‚ñë     ‚ñë‚ñë', '‚ñë       ‚ñë'],
            X: ['‚ñë       ‚ñë', ' ‚ñë     ‚ñë ', '  ‚ñë   ‚ñë  ', '   ‚ñë ‚ñë   ', '  ‚ñë   ‚ñë  ', ' ‚ñë     ‚ñë ', '‚ñë       ‚ñë'],
            Y: ['‚ñë       ‚ñë', ' ‚ñë     ‚ñë ', '  ‚ñë   ‚ñë  ', '   ‚ñë ‚ñë   ', '    ‚ñë    ', '    ‚ñë    ', '    ‚ñë    '],
            Z: ['‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë', '       ‚ñë ', '      ‚ñë  ', '     ‚ñë   ', '    ‚ñë    ', '   ‚ñë     ', '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getSerifFont() {
        return {
            A: ['    ‚ñà    ', '   ‚ñà‚ñà‚ñà   ', '  ‚ñà   ‚ñà  ', ' ‚ñà     ‚ñà ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            B: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            C: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            D: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '],
            E: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            F: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà        '],
            G: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            H: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            I: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            J: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà', '        ‚ñà', '        ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            K: ['‚ñà      ‚ñà', '‚ñà     ‚ñà ', '‚ñà    ‚ñà  ', '‚ñà   ‚ñà   ', '‚ñà  ‚ñà    ', '‚ñà ‚ñà     ', '‚ñà‚ñà      '],
            L: ['‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà        ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            M: ['‚ñà       ‚ñà', '‚ñà‚ñà     ‚ñà‚ñà', '‚ñà ‚ñà   ‚ñà ‚ñà', '‚ñà  ‚ñà ‚ñà  ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà'],
            N: ['‚ñà       ‚ñà', '‚ñà‚ñà      ‚ñà', '‚ñà ‚ñà     ‚ñà', '‚ñà  ‚ñà    ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà    ‚ñà  ‚ñà', '‚ñà     ‚ñà‚ñà‚ñà'],
            O: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            P: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà        ', '‚ñà        ', '‚ñà        '],
            Q: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà    ‚ñà  ‚ñà', '‚ñà     ‚ñà ‚ñà', '‚ñà      ‚ñà‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            R: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ', '‚ñà  ‚ñà     ', '‚ñà   ‚ñà    ', '‚ñà    ‚ñà   '],
            S: ['  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà        ', '‚ñà        ', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '        ‚ñà', '        ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            T: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    '],
            U: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà       ‚ñà', '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            V: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '    ‚ñà    ', '    ‚ñà    '],
            W: ['‚ñà       ‚ñà', '‚ñà       ‚ñà', '‚ñà   ‚ñà   ‚ñà', '‚ñà  ‚ñà ‚ñà  ‚ñà', '‚ñà ‚ñà   ‚ñà ‚ñà', '‚ñà‚ñà     ‚ñà‚ñà', '‚ñà       ‚ñà'],
            X: ['‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '  ‚ñà   ‚ñà  ', ' ‚ñà     ‚ñà ', '‚ñà       ‚ñà'],
            Y: ['‚ñà       ‚ñà', ' ‚ñà     ‚ñà ', '  ‚ñà   ‚ñà  ', '   ‚ñà ‚ñà   ', '    ‚ñà    ', '    ‚ñà    ', '    ‚ñà    '],
            Z: ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '       ‚ñà ', '      ‚ñà  ', '     ‚ñà   ', '    ‚ñà    ', '   ‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getSansFont() {
        return {
            A: ['    ‚ñÑ    ', '   ‚ñÑ‚ñÑ‚ñÑ   ', '  ‚ñÑ   ‚ñÑ  ', ' ‚ñÑ     ‚ñÑ ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ'],
            B: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ '],
            C: ['  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            D: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ '],
            E: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            F: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        '],
            G: ['  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            H: ['‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ'],
            I: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            J: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '        ‚ñÑ', '        ‚ñÑ', '        ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            K: ['‚ñÑ      ‚ñÑ', '‚ñÑ     ‚ñÑ ', '‚ñÑ    ‚ñÑ  ', '‚ñÑ   ‚ñÑ   ', '‚ñÑ  ‚ñÑ    ', '‚ñÑ ‚ñÑ     ', '‚ñÑ‚ñÑ      '],
            L: ['‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            M: ['‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ     ‚ñÑ‚ñÑ', '‚ñÑ ‚ñÑ   ‚ñÑ ‚ñÑ', '‚ñÑ  ‚ñÑ ‚ñÑ  ‚ñÑ', '‚ñÑ   ‚ñÑ   ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ'],
            N: ['‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ      ‚ñÑ', '‚ñÑ ‚ñÑ     ‚ñÑ', '‚ñÑ  ‚ñÑ    ‚ñÑ', '‚ñÑ   ‚ñÑ   ‚ñÑ', '‚ñÑ    ‚ñÑ  ‚ñÑ', '‚ñÑ     ‚ñÑ‚ñÑ‚ñÑ'],
            O: ['  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            P: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ        ', '‚ñÑ        ', '‚ñÑ        '],
            Q: ['  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ    ‚ñÑ  ‚ñÑ', '‚ñÑ     ‚ñÑ ‚ñÑ', '‚ñÑ      ‚ñÑ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            R: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ', '‚ñÑ  ‚ñÑ     ', '‚ñÑ   ‚ñÑ    ', '‚ñÑ    ‚ñÑ   '],
            S: ['  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '‚ñÑ        ', '‚ñÑ        ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '        ‚ñÑ', '        ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            T: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    '],
            U: ['‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            V: ['‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', ' ‚ñÑ     ‚ñÑ ', '  ‚ñÑ   ‚ñÑ  ', '   ‚ñÑ ‚ñÑ   ', '    ‚ñÑ    ', '    ‚ñÑ    '],
            W: ['‚ñÑ       ‚ñÑ', '‚ñÑ       ‚ñÑ', '‚ñÑ   ‚ñÑ   ‚ñÑ', '‚ñÑ  ‚ñÑ ‚ñÑ  ‚ñÑ', '‚ñÑ ‚ñÑ   ‚ñÑ ‚ñÑ', '‚ñÑ‚ñÑ     ‚ñÑ‚ñÑ', '‚ñÑ       ‚ñÑ'],
            X: ['‚ñÑ       ‚ñÑ', ' ‚ñÑ     ‚ñÑ ', '  ‚ñÑ   ‚ñÑ  ', '   ‚ñÑ ‚ñÑ   ', '  ‚ñÑ   ‚ñÑ  ', ' ‚ñÑ     ‚ñÑ ', '‚ñÑ       ‚ñÑ'],
            Y: ['‚ñÑ       ‚ñÑ', ' ‚ñÑ     ‚ñÑ ', '  ‚ñÑ   ‚ñÑ  ', '   ‚ñÑ ‚ñÑ   ', '    ‚ñÑ    ', '    ‚ñÑ    ', '    ‚ñÑ    '],
            Z: ['‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ', '       ‚ñÑ ', '      ‚ñÑ  ', '     ‚ñÑ   ', '    ‚ñÑ    ', '   ‚ñÑ     ', '‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getDecorativeFont() {
        return {
            A: ['    ‚óä    ', '   ‚óä‚óä‚óä   ', '  ‚óä   ‚óä  ', ' ‚óä     ‚óä ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä       ‚óä', '‚óä       ‚óä'],
            B: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä '],
            C: ['  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä        ', '‚óä        ', '‚óä        ', '‚óä        ', '‚óä        ', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            D: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä '],
            E: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä        ', '‚óä        ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä        ', '‚óä        ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            F: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä        ', '‚óä        ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä        ', '‚óä        ', '‚óä        '],
            G: ['  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä        ', '‚óä        ', '‚óä   ‚óä‚óä‚óä‚óä‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            H: ['‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä'],
            I: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            J: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '        ‚óä', '        ‚óä', '        ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            K: ['‚óä      ‚óä', '‚óä     ‚óä ', '‚óä    ‚óä  ', '‚óä   ‚óä   ', '‚óä  ‚óä    ', '‚óä ‚óä     ', '‚óä‚óä      '],
            L: ['‚óä        ', '‚óä        ', '‚óä        ', '‚óä        ', '‚óä        ', '‚óä        ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            M: ['‚óä       ‚óä', '‚óä‚óä     ‚óä‚óä', '‚óä ‚óä   ‚óä ‚óä', '‚óä  ‚óä ‚óä  ‚óä', '‚óä   ‚óä   ‚óä', '‚óä       ‚óä', '‚óä       ‚óä'],
            N: ['‚óä       ‚óä', '‚óä‚óä      ‚óä', '‚óä ‚óä     ‚óä', '‚óä  ‚óä    ‚óä', '‚óä   ‚óä   ‚óä', '‚óä    ‚óä  ‚óä', '‚óä     ‚óä‚óä‚óä'],
            O: ['  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            P: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä        ', '‚óä        ', '‚óä        '],
            Q: ['  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä    ‚óä  ‚óä', '‚óä     ‚óä ‚óä', '‚óä      ‚óä‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            R: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä ', '‚óä  ‚óä     ', '‚óä   ‚óä    ', '‚óä    ‚óä   '],
            S: ['  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '‚óä        ', '‚óä        ', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '        ‚óä', '        ‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            T: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    '],
            U: ['‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '‚óä       ‚óä', '  ‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            V: ['‚óä       ‚óä', '‚óä       ‚óä', ' ‚óä     ‚óä ', '  ‚óä   ‚óä  ', '   ‚óä ‚óä   ', '    ‚óä    ', '    ‚óä    '],
            W: ['‚óä       ‚óä', '‚óä       ‚óä', '‚óä   ‚óä   ‚óä', '‚óä  ‚óä ‚óä  ‚óä', '‚óä ‚óä   ‚óä ‚óä', '‚óä‚óä     ‚óä‚óä', '‚óä       ‚óä'],
            X: ['‚óä       ‚óä', ' ‚óä     ‚óä ', '  ‚óä   ‚óä  ', '   ‚óä ‚óä   ', '  ‚óä   ‚óä  ', ' ‚óä     ‚óä ', '‚óä       ‚óä'],
            Y: ['‚óä       ‚óä', ' ‚óä     ‚óä ', '  ‚óä   ‚óä  ', '   ‚óä ‚óä   ', '    ‚óä    ', '    ‚óä    ', '    ‚óä    '],
            Z: ['‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä', '       ‚óä ', '      ‚óä  ', '     ‚óä   ', '    ‚óä    ', '   ‚óä     ', '‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä‚óä'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    getArtisticFont() {
        return {
            A: ['    ‚óÜ    ', '   ‚óÜ‚óÜ‚óÜ   ', '  ‚óÜ   ‚óÜ  ', ' ‚óÜ     ‚óÜ ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ'],
            B: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ '],
            C: ['  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            D: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ '],
            E: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ        ', '‚óÜ        ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ        ', '‚óÜ        ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            F: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ        ', '‚óÜ        ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        '],
            G: ['  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ        ', '‚óÜ        ', '‚óÜ   ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            H: ['‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ'],
            I: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            J: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '        ‚óÜ', '        ‚óÜ', '        ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            K: ['‚óÜ      ‚óÜ', '‚óÜ     ‚óÜ ', '‚óÜ    ‚óÜ  ', '‚óÜ   ‚óÜ   ', '‚óÜ  ‚óÜ    ', '‚óÜ ‚óÜ     ', '‚óÜ‚óÜ      '],
            L: ['‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            M: ['‚óÜ       ‚óÜ', '‚óÜ‚óÜ     ‚óÜ‚óÜ', '‚óÜ ‚óÜ   ‚óÜ ‚óÜ', '‚óÜ  ‚óÜ ‚óÜ  ‚óÜ', '‚óÜ   ‚óÜ   ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ'],
            N: ['‚óÜ       ‚óÜ', '‚óÜ‚óÜ      ‚óÜ', '‚óÜ ‚óÜ     ‚óÜ', '‚óÜ  ‚óÜ    ‚óÜ', '‚óÜ   ‚óÜ   ‚óÜ', '‚óÜ    ‚óÜ  ‚óÜ', '‚óÜ     ‚óÜ‚óÜ‚óÜ'],
            O: ['  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            P: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ        ', '‚óÜ        ', '‚óÜ        '],
            Q: ['  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ    ‚óÜ  ‚óÜ', '‚óÜ     ‚óÜ ‚óÜ', '‚óÜ      ‚óÜ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            R: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ ', '‚óÜ  ‚óÜ     ', '‚óÜ   ‚óÜ    ', '‚óÜ    ‚óÜ   '],
            S: ['  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '‚óÜ        ', '‚óÜ        ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '        ‚óÜ', '        ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            T: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    '],
            U: ['‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '  ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            V: ['‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', ' ‚óÜ     ‚óÜ ', '  ‚óÜ   ‚óÜ  ', '   ‚óÜ ‚óÜ   ', '    ‚óÜ    ', '    ‚óÜ    '],
            W: ['‚óÜ       ‚óÜ', '‚óÜ       ‚óÜ', '‚óÜ   ‚óÜ   ‚óÜ', '‚óÜ  ‚óÜ ‚óÜ  ‚óÜ', '‚óÜ ‚óÜ   ‚óÜ ‚óÜ', '‚óÜ‚óÜ     ‚óÜ‚óÜ', '‚óÜ       ‚óÜ'],
            X: ['‚óÜ       ‚óÜ', ' ‚óÜ     ‚óÜ ', '  ‚óÜ   ‚óÜ  ', '   ‚óÜ ‚óÜ   ', '  ‚óÜ   ‚óÜ  ', ' ‚óÜ     ‚óÜ ', '‚óÜ       ‚óÜ'],
            Y: ['‚óÜ       ‚óÜ', ' ‚óÜ     ‚óÜ ', '  ‚óÜ   ‚óÜ  ', '   ‚óÜ ‚óÜ   ', '    ‚óÜ    ', '    ‚óÜ    ', '    ‚óÜ    '],
            Z: ['‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ', '       ‚óÜ ', '      ‚óÜ  ', '     ‚óÜ   ', '    ‚óÜ    ', '   ‚óÜ     ', '‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ'],
            ' ': ['         ', '         ', '         ', '         ', '         ', '         ', '         ']
        };
    }

    // Additional Font Styles
    get3DFont() {
        return {
            A: ['  ___  ', ' / _ \\ ', '/ /_\\ \\', '|  _  |', '| | | |', '\\_| |_/'],
            B: ['______ ', '| ___ \\', '| |_/ /', '| ___ \\', '| |_/ /', '\\____/ '],
            C: [' _____ ', '/  __ \\', '| /  \\/', '| |    ', '| \\__/\\', ' \\____/'],
            D: ['______ ', '|  _  \\', '| | | |', '| | | |', '| |/ / ', '|___/  '],
            E: [' _____ ', '|  ___|', '| |__  ', '|  __| ', '| |___ ', '\\____/ '],
            F: [' _____ ', '|  ___|', '| |__  ', '|  __| ', '| |    ', '\\_|    '],
            G: [' _____ ', '|  __ \\', '| |  \\/','| | __ ', '| |_\\ \\', ' \\____/'],
            H: ['_   _ ', '| | | |', '| |_| |', '|  _  |', '| | | |', '\\_| |_/'],
            I: ['_____ ', '|_   _|', '  | |  ', '  | |  ', ' _| |_ ', ' \\___/ '],
            J: ['     _ ', '    | |', '    | |', '    | |', '/\\__/ /', '\\____/ '],
            K: ['_   __', '| | / /', '| |/ / ', '|    \\ ', '| |\\  \\', '\\_| \\_/'],
            L: ['_     ', '| |    ', '| |    ', '| |    ', '| |____', '\\_____/'],
            M: ['___  ___', '|  \\/  |', '| .  . |', '| |\\/| |', '| |  | |', '\\_|  |_/'],
            N: ['_   _ ', '| \\ | |', '|  \\| |', '| . ` |', '| |\\  |', '\\_| \\_/'],
            O: [' _____ ', '|  _  |', '| | | |', '| | | |', '\\ \\_/ /', ' \\___/ '],
            P: ['______ ', '| ___ \\', '| |_/ /', '|  __/ ', '| |    ', '\\_|    '],
            Q: [' _____ ', '|  _  |', '| | | |', '| | | |', '\\ \\/' \\/\\', ' \\_/\\_/'],
            R: ['______ ', '| ___ \\', '| |_/ /', '|    / ', '| |\\ \\ ', '\\_| \\_|'],
            S: [' _____ ', '/  ___|', '\\ `--. ', ' `--. \\', '/\\__/ /', '\\____/ '],
            T: ['_____ ', '|_   _|', '  | |  ', '  | |  ', '  | |  ', '  \\_/  '],
            U: ['_   _ ', '| | | |', '| | | |', '| | | |', '| |_| |', ' \\___/ '],
            V: ['_   _ ', '| | | |', '| | | |', '| | | |', '\\ \\_/ /', ' \\___/ '],
            W: ['_    _ ', '| |  | |', '| |  | |', '| |/\\| |', '\\  /\\  /', ' \\/  \\/ '],
            X: ['__   __', '\\ \\ / /', ' \\ V / ', ' /   \\ ', '/ /^\\ \\', '\\/   \\/'],
            Y: ['__   __', '\\ \\ / /', ' \\ V / ', '  \\ /  ', '  | |  ', '  \\_/  '],
            Z: ['_____ ', '|___  |', '   / / ', '  / /  ', './ /___', '\\_____/'],
            ' ': ['       ', '       ', '       ', '       ', '       ', '       ']
        };
    }

    getStarFont() {
        return {
            A: ['  ‚òÖ  ', ' ‚òÖ ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            B: ['‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ '],
            C: [' ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    ', ' ‚òÖ‚òÖ‚òÖ‚òÖ'],
            D: ['‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ '],
            E: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ    ', '‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ    ', '‚òÖ    ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'],
            F: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ    ', '‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    '],
            G: [' ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ    ', '‚òÖ    ', '‚òÖ  ‚òÖ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ‚òÖ‚òÖ‚òÖ'],
            H: ['‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            I: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'],
            J: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '    ‚òÖ', '    ‚òÖ', '    ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ‚òÖ‚òÖ '],
            K: ['‚òÖ   ‚òÖ', '‚òÖ  ‚òÖ ', '‚òÖ‚òÖ‚òÖ  ', '‚òÖ  ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            L: ['‚òÖ    ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'],
            M: ['‚òÖ   ‚òÖ', '‚òÖ‚òÖ ‚òÖ‚òÖ', '‚òÖ ‚òÖ ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            N: ['‚òÖ   ‚òÖ', '‚òÖ‚òÖ  ‚òÖ', '‚òÖ ‚òÖ ‚òÖ', '‚òÖ  ‚òÖ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            O: [' ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ‚òÖ‚òÖ '],
            P: ['‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ    ', '‚òÖ    ', '‚òÖ    '],
            Q: [' ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ ‚òÖ ‚òÖ', '‚òÖ  ‚òÖ‚òÖ', ' ‚òÖ‚òÖ‚òÖ‚òÖ'],
            R: ['‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ‚òÖ‚òÖ‚òÖ ', '‚òÖ  ‚òÖ ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ'],
            S: [' ‚òÖ‚òÖ‚òÖ‚òÖ', '‚òÖ    ', ' ‚òÖ‚òÖ‚òÖ‚òÖ', '    ‚òÖ', '    ‚òÖ', ' ‚òÖ‚òÖ‚òÖ‚òÖ'],
            T: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  '],
            U: ['‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ‚òÖ‚òÖ '],
            V: ['‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ ‚òÖ ', ' ‚òÖ ‚òÖ ', '  ‚òÖ  '],
            W: ['‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', '‚òÖ ‚òÖ ‚òÖ', '‚òÖ‚òÖ ‚òÖ‚òÖ', '‚òÖ   ‚òÖ'],
            X: ['‚òÖ   ‚òÖ', ' ‚òÖ ‚òÖ ', '  ‚òÖ  ', '  ‚òÖ  ', ' ‚òÖ ‚òÖ ', '‚òÖ   ‚òÖ'],
            Y: ['‚òÖ   ‚òÖ', '‚òÖ   ‚òÖ', ' ‚òÖ ‚òÖ ', '  ‚òÖ  ', '  ‚òÖ  ', '  ‚òÖ  '],
            Z: ['‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', '    ‚òÖ', '   ‚òÖ ', '  ‚òÖ  ', ' ‚òÖ   ', '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'],
            ' ': ['     ', '     ', '     ', '     ', '     ', '     ']
        };
    }

    getDotFont() {
        return {
            A: ['  ‚Ä¢  ', ' ‚Ä¢ ‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            B: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ '],
            C: [' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    ', ' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            D: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ '],
            E: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢    ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            F: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢    ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    '],
            G: [' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢  ‚Ä¢‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            H: ['‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            I: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            J: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '    ‚Ä¢', '    ‚Ä¢', '    ‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢ '],
            K: ['‚Ä¢   ‚Ä¢', '‚Ä¢  ‚Ä¢ ', '‚Ä¢‚Ä¢   ', '‚Ä¢  ‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            L: ['‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            M: ['‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢', '‚Ä¢ ‚Ä¢ ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            N: ['‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢  ‚Ä¢', '‚Ä¢ ‚Ä¢ ‚Ä¢', '‚Ä¢  ‚Ä¢‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            O: [' ‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢ '],
            P: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢    ', '‚Ä¢    ', '‚Ä¢    '],
            Q: [' ‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢ ‚Ä¢ ‚Ä¢', '‚Ä¢  ‚Ä¢‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            R: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ', '‚Ä¢  ‚Ä¢ ', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢'],
            S: [' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '‚Ä¢    ', ' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '    ‚Ä¢', '    ‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            T: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  '],
            U: ['‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢‚Ä¢‚Ä¢ '],
            V: ['‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢ ‚Ä¢ ', ' ‚Ä¢ ‚Ä¢ ', '  ‚Ä¢  '],
            W: ['‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', '‚Ä¢ ‚Ä¢ ‚Ä¢', '‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢', '‚Ä¢   ‚Ä¢'],
            X: ['‚Ä¢   ‚Ä¢', ' ‚Ä¢ ‚Ä¢ ', '  ‚Ä¢  ', '  ‚Ä¢  ', ' ‚Ä¢ ‚Ä¢ ', '‚Ä¢   ‚Ä¢'],
            Y: ['‚Ä¢   ‚Ä¢', '‚Ä¢   ‚Ä¢', ' ‚Ä¢ ‚Ä¢ ', '  ‚Ä¢  ', '  ‚Ä¢  ', '  ‚Ä¢  '],
            Z: ['‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢', '    ‚Ä¢', '   ‚Ä¢ ', '  ‚Ä¢  ', ' ‚Ä¢   ', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'],
            ' ': ['     ', '     ', '     ', '     ', '     ', '     ']
        };
    }

    getWavyFont() {
        return {
            A: ['  ‚âà‚âà  ', ' ‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            B: ['‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà '],
            C: [' ‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    ', ' ‚âà‚âà‚âà‚âà‚âà'],
            D: ['‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà '],
            E: ['‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà    ', '‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà‚âà‚âà‚âà‚âà'],
            F: ['‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà    ', '‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    '],
            G: [' ‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà ‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà‚âà'],
            H: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            I: ['‚âà‚âà‚âà‚âà‚âà‚âà', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '‚âà‚âà‚âà‚âà‚âà‚âà'],
            J: ['‚âà‚âà‚âà‚âà‚âà‚âà', '    ‚âà‚âà', '    ‚âà‚âà', '    ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà '],
            K: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà ‚âà‚âà ', '‚âà‚âà‚âà‚âà  ', '‚âà‚âà ‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            L: ['‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà‚âà‚âà‚âà‚âà'],
            M: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà ‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            N: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà ‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            O: [' ‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà '],
            P: ['‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà    ', '‚âà‚âà    ', '‚âà‚âà    '],
            Q: [' ‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà ‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà '],
            R: ['‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà ', '‚âà‚âà ‚âà‚âà ', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            S: [' ‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà    ', ' ‚âà‚âà‚âà‚âà‚âà', '    ‚âà‚âà', '    ‚âà‚âà', ' ‚âà‚âà‚âà‚âà‚âà'],
            T: ['‚âà‚âà‚âà‚âà‚âà‚âà', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  '],
            U: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà '],
            V: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà ', ' ‚âà‚âà‚âà‚âà ', '  ‚âà‚âà  '],
            W: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà ‚âà‚âà‚âà', '‚âà‚âà‚âà‚âà‚âà‚âà', '‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà'],
            X: ['‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', ' ‚âà‚âà‚âà‚âà ', '‚âà‚âà  ‚âà‚âà'],
            Y: ['‚âà‚âà  ‚âà‚âà', '‚âà‚âà  ‚âà‚âà', ' ‚âà‚âà‚âà‚âà ', '  ‚âà‚âà  ', '  ‚âà‚âà  ', '  ‚âà‚âà  '],
            Z: ['‚âà‚âà‚âà‚âà‚âà‚âà', '    ‚âà‚âà', '   ‚âà‚âà ', '  ‚âà‚âà  ', ' ‚âà‚âà   ', '‚âà‚âà‚âà‚âà‚âà‚âà'],
            ' ': ['      ', '      ', '      ', '      ', '      ', '      ']
        };
    }

    getPixelFont() {
        return {
            A: ['  ‚ñì  ', ' ‚ñì ‚ñì ', '‚ñì‚ñì‚ñì‚ñì‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì'],
            B: ['‚ñì‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì '],
            C: [' ‚ñì‚ñì‚ñì‚ñì', '‚ñì    ', '‚ñì    ', '‚ñì    ', ' ‚ñì‚ñì‚ñì‚ñì'],
            D: ['‚ñì‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì '],
            E: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '‚ñì    ', '‚ñì‚ñì‚ñì‚ñì ', '‚ñì    ', '‚ñì‚ñì‚ñì‚ñì‚ñì'],
            F: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '‚ñì    ', '‚ñì‚ñì‚ñì‚ñì ', '‚ñì    ', '‚ñì    '],
            G: [' ‚ñì‚ñì‚ñì‚ñì', '‚ñì    ', '‚ñì  ‚ñì‚ñì', '‚ñì   ‚ñì', ' ‚ñì‚ñì‚ñì‚ñì'],
            H: ['‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì'],
            I: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '  ‚ñì  ', '  ‚ñì  ', '  ‚ñì  ', '‚ñì‚ñì‚ñì‚ñì‚ñì'],
            J: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '    ‚ñì', '    ‚ñì', '‚ñì   ‚ñì', ' ‚ñì‚ñì‚ñì '],
            K: ['‚ñì   ‚ñì', '‚ñì  ‚ñì ', '‚ñì‚ñì‚ñì  ', '‚ñì  ‚ñì ', '‚ñì   ‚ñì'],
            L: ['‚ñì    ', '‚ñì    ', '‚ñì    ', '‚ñì    ', '‚ñì‚ñì‚ñì‚ñì‚ñì'],
            M: ['‚ñì   ‚ñì', '‚ñì‚ñì ‚ñì‚ñì', '‚ñì ‚ñì ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì'],
            N: ['‚ñì   ‚ñì', '‚ñì‚ñì  ‚ñì', '‚ñì ‚ñì ‚ñì', '‚ñì  ‚ñì‚ñì', '‚ñì   ‚ñì'],
            O: [' ‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì', ' ‚ñì‚ñì‚ñì '],
            P: ['‚ñì‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì ', '‚ñì    ', '‚ñì    '],
            Q: [' ‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì  ‚ñì‚ñì', ' ‚ñì‚ñì‚ñì‚ñì'],
            R: ['‚ñì‚ñì‚ñì‚ñì ', '‚ñì   ‚ñì', '‚ñì‚ñì‚ñì‚ñì ', '‚ñì  ‚ñì ', '‚ñì   ‚ñì'],
            S: [' ‚ñì‚ñì‚ñì‚ñì', '‚ñì    ', ' ‚ñì‚ñì‚ñì‚ñì', '    ‚ñì', ' ‚ñì‚ñì‚ñì‚ñì'],
            T: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '  ‚ñì  ', '  ‚ñì  ', '  ‚ñì  ', '  ‚ñì  '],
            U: ['‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì', ' ‚ñì‚ñì‚ñì '],
            V: ['‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì   ‚ñì', ' ‚ñì ‚ñì ', '  ‚ñì  '],
            W: ['‚ñì   ‚ñì', '‚ñì   ‚ñì', '‚ñì ‚ñì ‚ñì', '‚ñì‚ñì ‚ñì‚ñì', '‚ñì   ‚ñì'],
            X: ['‚ñì   ‚ñì', ' ‚ñì ‚ñì ', '  ‚ñì  ', ' ‚ñì ‚ñì ', '‚ñì   ‚ñì'],
            Y: ['‚ñì   ‚ñì', ' ‚ñì ‚ñì ', '  ‚ñì  ', '  ‚ñì  ', '  ‚ñì  '],
            Z: ['‚ñì‚ñì‚ñì‚ñì‚ñì', '    ‚ñì', '   ‚ñì ', '  ‚ñì  ', '‚ñì‚ñì‚ñì‚ñì‚ñì'],
            ' ': ['     ', '     ', '     ', '     ', '     ']
        };
    }
}

// Note: Initialization moved to app.js for better control and error handling
// The ASCIIArtGenerator class is defined here and instantiated by app.js
